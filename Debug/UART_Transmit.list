
UART_Transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002768  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08002938  08002938  00012938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029ec  080029ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080029ec  080029ec  000129ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029f4  080029f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029f4  080029f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029f8  080029f8  000129f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080029fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08002a6c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002a6c  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005a24  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001465  00000000  00000000  00025ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000600  00000000  00000000  00026f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000538  00000000  00000000  00027530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002528b  00000000  00000000  00027a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006bf7  00000000  00000000  0004ccf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1f0a  00000000  00000000  000538ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001357f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d8c  00000000  00000000  00135844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002920 	.word	0x08002920

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08002920 	.word	0x08002920

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fa33 	bl	8000a22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f808 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f874 	bl	80006ac <MX_GPIO_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("Hello world");
 80005c4:	4801      	ldr	r0, [pc, #4]	; (80005cc <main+0x18>)
 80005c6:	f001 fa1d 	bl	8001a04 <iprintf>
 80005ca:	e7fb      	b.n	80005c4 <main+0x10>
 80005cc:	08002938 	.word	0x08002938

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	; 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fa08 	bl	80019f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005f4:	f000 fd1e 	bl	8001034 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	4b2a      	ldr	r3, [pc, #168]	; (80006a4 <SystemClock_Config+0xd4>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a29      	ldr	r2, [pc, #164]	; (80006a4 <SystemClock_Config+0xd4>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b27      	ldr	r3, [pc, #156]	; (80006a4 <SystemClock_Config+0xd4>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000610:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <SystemClock_Config+0xd8>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a24      	ldr	r2, [pc, #144]	; (80006a8 <SystemClock_Config+0xd8>)
 8000616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <SystemClock_Config+0xd8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800063c:	230c      	movs	r3, #12
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000640:	23c0      	movs	r3, #192	; 0xc0
 8000642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000648:	2302      	movs	r3, #2
 800064a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fd4f 	bl	80010f4 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800065c:	f000 f8ca 	bl	80007f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000660:	f000 fcf8 	bl	8001054 <HAL_PWREx_EnableOverDrive>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800066a:	f000 f8c3 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2302      	movs	r3, #2
 8000674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800067e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000684:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2106      	movs	r1, #6
 800068c:	4618      	mov	r0, r3
 800068e:	f000 ffd5 	bl	800163c <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000698:	f000 f8ac 	bl	80007f4 <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	3750      	adds	r7, #80	; 0x50
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006c2:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <MX_GPIO_Init+0x8c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a1c      	ldr	r2, [pc, #112]	; (8000738 <MX_GPIO_Init+0x8c>)
 80006c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <MX_GPIO_Init+0x8c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_GPIO_Init+0x8c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a16      	ldr	r2, [pc, #88]	; (8000738 <MX_GPIO_Init+0x8c>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_GPIO_Init+0x8c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_GPIO_Init+0x8c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a10      	ldr	r2, [pc, #64]	; (8000738 <MX_GPIO_Init+0x8c>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_GPIO_Init+0x8c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_GPIO_Port, TX_Pin, GPIO_PIN_SET);
 800070a:	2201      	movs	r2, #1
 800070c:	2102      	movs	r1, #2
 800070e:	480b      	ldr	r0, [pc, #44]	; (800073c <MX_GPIO_Init+0x90>)
 8000710:	f000 fc76 	bl	8001000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TX_Pin */
  GPIO_InitStruct.Pin = TX_Pin;
 8000714:	2302      	movs	r3, #2
 8000716:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	4619      	mov	r1, r3
 800072a:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_GPIO_Init+0x90>)
 800072c:	f000 fabc 	bl	8000ca8 <HAL_GPIO_Init>

}
 8000730:	bf00      	nop
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40023800 	.word	0x40023800
 800073c:	40022000 	.word	0x40022000

08000740 <SysTickDelayCount>:

/* USER CODE BEGIN 4 */

void SysTickDelayCount(unsigned long ulCount)
{
    __asm("    subs    r0, #1\n"
 8000740:	3801      	subs	r0, #1
 8000742:	d1fd      	bne.n	8000740 <SysTickDelayCount>
 8000744:	4770      	bx	lr
          "    bne.n     SysTickDelayCount\n"
          "    bx      lr");
}
 8000746:	bf00      	nop

08000748 <sendChar>:

void sendChar(char data)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOI, TX_Pin, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2102      	movs	r1, #2
 8000756:	4818      	ldr	r0, [pc, #96]	; (80007b8 <sendChar+0x70>)
 8000758:	f000 fc52 	bl	8001000 <HAL_GPIO_WritePin>
	SysTickDelayCount(delay_instr);
 800075c:	f642 03a0 	movw	r3, #10400	; 0x28a0
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ffed 	bl	8000740 <SysTickDelayCount>

	for (int i = 0; i < 8; i++)
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	e014      	b.n	8000796 <sendChar+0x4e>
	{
		HAL_GPIO_WritePin(GPIOI, TX_Pin, data >> i & 1);
 800076c:	79fa      	ldrb	r2, [r7, #7]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	fa42 f303 	asr.w	r3, r2, r3
 8000774:	b2db      	uxtb	r3, r3
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	b2db      	uxtb	r3, r3
 800077c:	461a      	mov	r2, r3
 800077e:	2102      	movs	r1, #2
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <sendChar+0x70>)
 8000782:	f000 fc3d 	bl	8001000 <HAL_GPIO_WritePin>
		SysTickDelayCount(delay_instr);
 8000786:	f642 03a0 	movw	r3, #10400	; 0x28a0
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffd8 	bl	8000740 <SysTickDelayCount>
	for (int i = 0; i < 8; i++)
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	3301      	adds	r3, #1
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b07      	cmp	r3, #7
 800079a:	dde7      	ble.n	800076c <sendChar+0x24>
	}

	HAL_GPIO_WritePin(GPIOI, TX_Pin, 1);
 800079c:	2201      	movs	r2, #1
 800079e:	2102      	movs	r1, #2
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <sendChar+0x70>)
 80007a2:	f000 fc2d 	bl	8001000 <HAL_GPIO_WritePin>
	SysTickDelayCount(delay_instr);
 80007a6:	f642 03a0 	movw	r3, #10400	; 0x28a0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffc8 	bl	8000740 <SysTickDelayCount>
}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40022000 	.word	0x40022000

080007bc <_write>:

int _write(int file, char *ptr, int len)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	e009      	b.n	80007e2 <_write+0x26>
	{
		sendChar(*ptr++);
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	1c5a      	adds	r2, r3, #1
 80007d2:	60ba      	str	r2, [r7, #8]
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ffb6 	bl	8000748 <sendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	3301      	adds	r3, #1
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	697a      	ldr	r2, [r7, #20]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	dbf1      	blt.n	80007ce <_write+0x12>
	}
	return len;
 80007ea:	687b      	ldr	r3, [r7, #4]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <HAL_MspInit+0x44>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <HAL_MspInit+0x44>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000810:	6413      	str	r3, [r2, #64]	; 0x40
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <HAL_MspInit+0x44>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_MspInit+0x44>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <HAL_MspInit+0x44>)
 8000824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000828:	6453      	str	r3, [r2, #68]	; 0x44
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_MspInit+0x44>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800084c:	e7fe      	b.n	800084c <NMI_Handler+0x4>

0800084e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <HardFault_Handler+0x4>

08000854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <MemManage_Handler+0x4>

0800085a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <BusFault_Handler+0x4>

08000860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <UsageFault_Handler+0x4>

08000866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000894:	f000 f902 	bl	8000a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}

0800089c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	e00a      	b.n	80008c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008ae:	f3af 8000 	nop.w
 80008b2:	4601      	mov	r1, r0
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	60ba      	str	r2, [r7, #8]
 80008ba:	b2ca      	uxtb	r2, r1
 80008bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	3301      	adds	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697a      	ldr	r2, [r7, #20]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	dbf0      	blt.n	80008ae <_read+0x12>
	}

return len;
 80008cc:	687b      	ldr	r3, [r7, #4]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
	return -1;
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008fe:	605a      	str	r2, [r3, #4]
	return 0;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <_isatty>:

int _isatty(int file)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	return 1;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
	return 0;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
	...

08000940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000948:	4a14      	ldr	r2, [pc, #80]	; (800099c <_sbrk+0x5c>)
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <_sbrk+0x60>)
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <_sbrk+0x64>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <_sbrk+0x68>)
 8000960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	429a      	cmp	r2, r3
 800096e:	d207      	bcs.n	8000980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000970:	f001 f816 	bl	80019a0 <__errno>
 8000974:	4603      	mov	r3, r0
 8000976:	220c      	movs	r2, #12
 8000978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295
 800097e:	e009      	b.n	8000994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <_sbrk+0x64>)
 8000990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20050000 	.word	0x20050000
 80009a0:	00000400 	.word	0x00000400
 80009a4:	2000008c 	.word	0x2000008c
 80009a8:	200000a8 	.word	0x200000a8

080009ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <SystemInit+0x20>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b6:	4a05      	ldr	r2, [pc, #20]	; (80009cc <SystemInit+0x20>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009d6:	490e      	ldr	r1, [pc, #56]	; (8000a10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009d8:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009ec:	4c0b      	ldr	r4, [pc, #44]	; (8000a1c <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009fa:	f7ff ffd7 	bl	80009ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fe:	f000 ffd5 	bl	80019ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a02:	f7ff fdd7 	bl	80005b4 <main>
  bx  lr    
 8000a06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a08:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a14:	080029fc 	.word	0x080029fc
  ldr r2, =_sbss
 8000a18:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a1c:	200000a4 	.word	0x200000a4

08000a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC_IRQHandler>

08000a22 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a26:	2003      	movs	r0, #3
 8000a28:	f000 f90a 	bl	8000c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f000 f805 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a32:	f7ff fee5 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_InitTick+0x54>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_InitTick+0x58>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f917 	bl	8000c8e <HAL_SYSTICK_Config>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e00e      	b.n	8000a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d80a      	bhi.n	8000a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	f000 f8ed 	bl	8000c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a7c:	4a06      	ldr	r2, [pc, #24]	; (8000a98 <HAL_InitTick+0x5c>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e000      	b.n	8000a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000000 	.word	0x20000000
 8000a94:	20000008 	.word	0x20000008
 8000a98:	20000004 	.word	0x20000004

08000a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_IncTick+0x20>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_IncTick+0x24>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <HAL_IncTick+0x24>)
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000090 	.word	0x20000090

08000ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <HAL_GetTick+0x14>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20000090 	.word	0x20000090

08000adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <__NVIC_SetPriorityGrouping+0x40>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af8:	4013      	ands	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000b06:	4313      	orrs	r3, r2
 8000b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0a:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <__NVIC_SetPriorityGrouping+0x40>)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	60d3      	str	r3, [r2, #12]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00
 8000b20:	05fa0000 	.word	0x05fa0000

08000b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <__NVIC_GetPriorityGrouping+0x18>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	f003 0307 	and.w	r3, r3, #7
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db0a      	blt.n	8000b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	490c      	ldr	r1, [pc, #48]	; (8000b8c <__NVIC_SetPriority+0x4c>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	0112      	lsls	r2, r2, #4
 8000b60:	b2d2      	uxtb	r2, r2
 8000b62:	440b      	add	r3, r1
 8000b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b68:	e00a      	b.n	8000b80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4908      	ldr	r1, [pc, #32]	; (8000b90 <__NVIC_SetPriority+0x50>)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	f003 030f 	and.w	r3, r3, #15
 8000b76:	3b04      	subs	r3, #4
 8000b78:	0112      	lsls	r2, r2, #4
 8000b7a:	b2d2      	uxtb	r2, r2
 8000b7c:	440b      	add	r3, r1
 8000b7e:	761a      	strb	r2, [r3, #24]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000e100 	.word	0xe000e100
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b089      	sub	sp, #36	; 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	f1c3 0307 	rsb	r3, r3, #7
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	bf28      	it	cs
 8000bb2:	2304      	movcs	r3, #4
 8000bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	2b06      	cmp	r3, #6
 8000bbc:	d902      	bls.n	8000bc4 <NVIC_EncodePriority+0x30>
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3b03      	subs	r3, #3
 8000bc2:	e000      	b.n	8000bc6 <NVIC_EncodePriority+0x32>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	fa01 f303 	lsl.w	r3, r1, r3
 8000be6:	43d9      	mvns	r1, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	4313      	orrs	r3, r2
         );
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3724      	adds	r7, #36	; 0x24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c0c:	d301      	bcc.n	8000c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00f      	b.n	8000c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <SysTick_Config+0x40>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1a:	210f      	movs	r1, #15
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	f7ff ff8e 	bl	8000b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <SysTick_Config+0x40>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <SysTick_Config+0x40>)
 8000c2c:	2207      	movs	r2, #7
 8000c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	e000e010 	.word	0xe000e010

08000c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ff47 	bl	8000adc <__NVIC_SetPriorityGrouping>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c68:	f7ff ff5c 	bl	8000b24 <__NVIC_GetPriorityGrouping>
 8000c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	68b9      	ldr	r1, [r7, #8]
 8000c72:	6978      	ldr	r0, [r7, #20]
 8000c74:	f7ff ff8e 	bl	8000b94 <NVIC_EncodePriority>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff5d 	bl	8000b40 <__NVIC_SetPriority>
}
 8000c86:	bf00      	nop
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff ffb0 	bl	8000bfc <SysTick_Config>
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
 8000cc6:	e175      	b.n	8000fb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000cc8:	2201      	movs	r2, #1
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f040 8164 	bne.w	8000fae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0303 	and.w	r3, r3, #3
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d005      	beq.n	8000cfe <HAL_GPIO_Init+0x56>
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d130      	bne.n	8000d60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2203      	movs	r2, #3
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d34:	2201      	movs	r2, #1
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4013      	ands	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	091b      	lsrs	r3, r3, #4
 8000d4a:	f003 0201 	and.w	r2, r3, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d017      	beq.n	8000d9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d123      	bne.n	8000df0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	08da      	lsrs	r2, r3, #3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3208      	adds	r2, #8
 8000db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	f003 0307 	and.w	r3, r3, #7
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	691a      	ldr	r2, [r3, #16]
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	08da      	lsrs	r2, r3, #3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3208      	adds	r2, #8
 8000dea:	69b9      	ldr	r1, [r7, #24]
 8000dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0203 	and.w	r2, r3, #3
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f000 80be 	beq.w	8000fae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	4b66      	ldr	r3, [pc, #408]	; (8000fcc <HAL_GPIO_Init+0x324>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	4a65      	ldr	r2, [pc, #404]	; (8000fcc <HAL_GPIO_Init+0x324>)
 8000e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3e:	4b63      	ldr	r3, [pc, #396]	; (8000fcc <HAL_GPIO_Init+0x324>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e4a:	4a61      	ldr	r2, [pc, #388]	; (8000fd0 <HAL_GPIO_Init+0x328>)
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	089b      	lsrs	r3, r3, #2
 8000e50:	3302      	adds	r3, #2
 8000e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	220f      	movs	r2, #15
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a58      	ldr	r2, [pc, #352]	; (8000fd4 <HAL_GPIO_Init+0x32c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d037      	beq.n	8000ee6 <HAL_GPIO_Init+0x23e>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a57      	ldr	r2, [pc, #348]	; (8000fd8 <HAL_GPIO_Init+0x330>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d031      	beq.n	8000ee2 <HAL_GPIO_Init+0x23a>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a56      	ldr	r2, [pc, #344]	; (8000fdc <HAL_GPIO_Init+0x334>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d02b      	beq.n	8000ede <HAL_GPIO_Init+0x236>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a55      	ldr	r2, [pc, #340]	; (8000fe0 <HAL_GPIO_Init+0x338>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d025      	beq.n	8000eda <HAL_GPIO_Init+0x232>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a54      	ldr	r2, [pc, #336]	; (8000fe4 <HAL_GPIO_Init+0x33c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d01f      	beq.n	8000ed6 <HAL_GPIO_Init+0x22e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a53      	ldr	r2, [pc, #332]	; (8000fe8 <HAL_GPIO_Init+0x340>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d019      	beq.n	8000ed2 <HAL_GPIO_Init+0x22a>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a52      	ldr	r2, [pc, #328]	; (8000fec <HAL_GPIO_Init+0x344>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0x226>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a51      	ldr	r2, [pc, #324]	; (8000ff0 <HAL_GPIO_Init+0x348>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d00d      	beq.n	8000eca <HAL_GPIO_Init+0x222>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a50      	ldr	r2, [pc, #320]	; (8000ff4 <HAL_GPIO_Init+0x34c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d007      	beq.n	8000ec6 <HAL_GPIO_Init+0x21e>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4f      	ldr	r2, [pc, #316]	; (8000ff8 <HAL_GPIO_Init+0x350>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_GPIO_Init+0x21a>
 8000ebe:	2309      	movs	r3, #9
 8000ec0:	e012      	b.n	8000ee8 <HAL_GPIO_Init+0x240>
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	e010      	b.n	8000ee8 <HAL_GPIO_Init+0x240>
 8000ec6:	2308      	movs	r3, #8
 8000ec8:	e00e      	b.n	8000ee8 <HAL_GPIO_Init+0x240>
 8000eca:	2307      	movs	r3, #7
 8000ecc:	e00c      	b.n	8000ee8 <HAL_GPIO_Init+0x240>
 8000ece:	2306      	movs	r3, #6
 8000ed0:	e00a      	b.n	8000ee8 <HAL_GPIO_Init+0x240>
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	e008      	b.n	8000ee8 <HAL_GPIO_Init+0x240>
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	e006      	b.n	8000ee8 <HAL_GPIO_Init+0x240>
 8000eda:	2303      	movs	r3, #3
 8000edc:	e004      	b.n	8000ee8 <HAL_GPIO_Init+0x240>
 8000ede:	2302      	movs	r3, #2
 8000ee0:	e002      	b.n	8000ee8 <HAL_GPIO_Init+0x240>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <HAL_GPIO_Init+0x240>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	69fa      	ldr	r2, [r7, #28]
 8000eea:	f002 0203 	and.w	r2, r2, #3
 8000eee:	0092      	lsls	r2, r2, #2
 8000ef0:	4093      	lsls	r3, r2
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ef8:	4935      	ldr	r1, [pc, #212]	; (8000fd0 <HAL_GPIO_Init+0x328>)
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	3302      	adds	r3, #2
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f06:	4b3d      	ldr	r3, [pc, #244]	; (8000ffc <HAL_GPIO_Init+0x354>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f2a:	4a34      	ldr	r2, [pc, #208]	; (8000ffc <HAL_GPIO_Init+0x354>)
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f30:	4b32      	ldr	r3, [pc, #200]	; (8000ffc <HAL_GPIO_Init+0x354>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f54:	4a29      	ldr	r2, [pc, #164]	; (8000ffc <HAL_GPIO_Init+0x354>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f5a:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <HAL_GPIO_Init+0x354>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f7e:	4a1f      	ldr	r2, [pc, #124]	; (8000ffc <HAL_GPIO_Init+0x354>)
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <HAL_GPIO_Init+0x354>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fa8:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <HAL_GPIO_Init+0x354>)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	2b0f      	cmp	r3, #15
 8000fb8:	f67f ae86 	bls.w	8000cc8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	; 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40013800 	.word	0x40013800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40020800 	.word	0x40020800
 8000fe0:	40020c00 	.word	0x40020c00
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40021400 	.word	0x40021400
 8000fec:	40021800 	.word	0x40021800
 8000ff0:	40021c00 	.word	0x40021c00
 8000ff4:	40022000 	.word	0x40022000
 8000ff8:	40022400 	.word	0x40022400
 8000ffc:	40013c00 	.word	0x40013c00

08001000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
 800100c:	4613      	mov	r3, r2
 800100e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001010:	787b      	ldrb	r3, [r7, #1]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001016:	887a      	ldrh	r2, [r7, #2]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800101c:	e003      	b.n	8001026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800101e:	887b      	ldrh	r3, [r7, #2]
 8001020:	041a      	lsls	r2, r3, #16
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	619a      	str	r2, [r3, #24]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800103e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40007000 	.word	0x40007000

08001054 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	4b23      	ldr	r3, [pc, #140]	; (80010ec <HAL_PWREx_EnableOverDrive+0x98>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	4a22      	ldr	r2, [pc, #136]	; (80010ec <HAL_PWREx_EnableOverDrive+0x98>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001068:	6413      	str	r3, [r2, #64]	; 0x40
 800106a:	4b20      	ldr	r3, [pc, #128]	; (80010ec <HAL_PWREx_EnableOverDrive+0x98>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001076:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a1d      	ldr	r2, [pc, #116]	; (80010f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800107c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001080:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001082:	f7ff fd1f 	bl	8000ac4 <HAL_GetTick>
 8001086:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001088:	e009      	b.n	800109e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800108a:	f7ff fd1b 	bl	8000ac4 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001098:	d901      	bls.n	800109e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e022      	b.n	80010e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010aa:	d1ee      	bne.n	800108a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80010b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010b8:	f7ff fd04 	bl	8000ac4 <HAL_GetTick>
 80010bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010be:	e009      	b.n	80010d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010c0:	f7ff fd00 	bl	8000ac4 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010ce:	d901      	bls.n	80010d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e007      	b.n	80010e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80010e0:	d1ee      	bne.n	80010c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40007000 	.word	0x40007000

080010f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80010fc:	2300      	movs	r3, #0
 80010fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e291      	b.n	800162e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 8087 	beq.w	8001226 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001118:	4b96      	ldr	r3, [pc, #600]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 030c 	and.w	r3, r3, #12
 8001120:	2b04      	cmp	r3, #4
 8001122:	d00c      	beq.n	800113e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001124:	4b93      	ldr	r3, [pc, #588]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 030c 	and.w	r3, r3, #12
 800112c:	2b08      	cmp	r3, #8
 800112e:	d112      	bne.n	8001156 <HAL_RCC_OscConfig+0x62>
 8001130:	4b90      	ldr	r3, [pc, #576]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001138:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800113c:	d10b      	bne.n	8001156 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800113e:	4b8d      	ldr	r3, [pc, #564]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d06c      	beq.n	8001224 <HAL_RCC_OscConfig+0x130>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d168      	bne.n	8001224 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e26b      	b.n	800162e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800115e:	d106      	bne.n	800116e <HAL_RCC_OscConfig+0x7a>
 8001160:	4b84      	ldr	r3, [pc, #528]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a83      	ldr	r2, [pc, #524]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 8001166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	e02e      	b.n	80011cc <HAL_RCC_OscConfig+0xd8>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10c      	bne.n	8001190 <HAL_RCC_OscConfig+0x9c>
 8001176:	4b7f      	ldr	r3, [pc, #508]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a7e      	ldr	r2, [pc, #504]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 800117c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	4b7c      	ldr	r3, [pc, #496]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a7b      	ldr	r2, [pc, #492]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 8001188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	e01d      	b.n	80011cc <HAL_RCC_OscConfig+0xd8>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001198:	d10c      	bne.n	80011b4 <HAL_RCC_OscConfig+0xc0>
 800119a:	4b76      	ldr	r3, [pc, #472]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a75      	ldr	r2, [pc, #468]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 80011a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	4b73      	ldr	r3, [pc, #460]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a72      	ldr	r2, [pc, #456]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 80011ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e00b      	b.n	80011cc <HAL_RCC_OscConfig+0xd8>
 80011b4:	4b6f      	ldr	r3, [pc, #444]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a6e      	ldr	r2, [pc, #440]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 80011ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	4b6c      	ldr	r3, [pc, #432]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a6b      	ldr	r2, [pc, #428]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 80011c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d013      	beq.n	80011fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d4:	f7ff fc76 	bl	8000ac4 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011dc:	f7ff fc72 	bl	8000ac4 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b64      	cmp	r3, #100	; 0x64
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e21f      	b.n	800162e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ee:	4b61      	ldr	r3, [pc, #388]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0f0      	beq.n	80011dc <HAL_RCC_OscConfig+0xe8>
 80011fa:	e014      	b.n	8001226 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fc:	f7ff fc62 	bl	8000ac4 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001204:	f7ff fc5e 	bl	8000ac4 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b64      	cmp	r3, #100	; 0x64
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e20b      	b.n	800162e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001216:	4b57      	ldr	r3, [pc, #348]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x110>
 8001222:	e000      	b.n	8001226 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d069      	beq.n	8001306 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001232:	4b50      	ldr	r3, [pc, #320]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 030c 	and.w	r3, r3, #12
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00b      	beq.n	8001256 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800123e:	4b4d      	ldr	r3, [pc, #308]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 030c 	and.w	r3, r3, #12
 8001246:	2b08      	cmp	r3, #8
 8001248:	d11c      	bne.n	8001284 <HAL_RCC_OscConfig+0x190>
 800124a:	4b4a      	ldr	r3, [pc, #296]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d116      	bne.n	8001284 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001256:	4b47      	ldr	r3, [pc, #284]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d005      	beq.n	800126e <HAL_RCC_OscConfig+0x17a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d001      	beq.n	800126e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e1df      	b.n	800162e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126e:	4b41      	ldr	r3, [pc, #260]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	493d      	ldr	r1, [pc, #244]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001282:	e040      	b.n	8001306 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d023      	beq.n	80012d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800128c:	4b39      	ldr	r3, [pc, #228]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a38      	ldr	r2, [pc, #224]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001298:	f7ff fc14 	bl	8000ac4 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a0:	f7ff fc10 	bl	8000ac4 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e1bd      	b.n	800162e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b2:	4b30      	ldr	r3, [pc, #192]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012be:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	4929      	ldr	r1, [pc, #164]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	600b      	str	r3, [r1, #0]
 80012d2:	e018      	b.n	8001306 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a26      	ldr	r2, [pc, #152]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 80012da:	f023 0301 	bic.w	r3, r3, #1
 80012de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e0:	f7ff fbf0 	bl	8000ac4 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e8:	f7ff fbec 	bl	8000ac4 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e199      	b.n	800162e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fa:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b00      	cmp	r3, #0
 8001310:	d038      	beq.n	8001384 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d019      	beq.n	800134e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 800131c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800131e:	4a15      	ldr	r2, [pc, #84]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001326:	f7ff fbcd 	bl	8000ac4 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800132e:	f7ff fbc9 	bl	8000ac4 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e176      	b.n	800162e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 8001342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x23a>
 800134c:	e01a      	b.n	8001384 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 8001350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001352:	4a08      	ldr	r2, [pc, #32]	; (8001374 <HAL_RCC_OscConfig+0x280>)
 8001354:	f023 0301 	bic.w	r3, r3, #1
 8001358:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135a:	f7ff fbb3 	bl	8000ac4 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001360:	e00a      	b.n	8001378 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001362:	f7ff fbaf 	bl	8000ac4 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d903      	bls.n	8001378 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e15c      	b.n	800162e <HAL_RCC_OscConfig+0x53a>
 8001374:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001378:	4b91      	ldr	r3, [pc, #580]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 800137a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1ee      	bne.n	8001362 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 80a4 	beq.w	80014da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001392:	4b8b      	ldr	r3, [pc, #556]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10d      	bne.n	80013ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	4b88      	ldr	r3, [pc, #544]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	4a87      	ldr	r2, [pc, #540]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 80013a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
 80013aa:	4b85      	ldr	r3, [pc, #532]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013b6:	2301      	movs	r3, #1
 80013b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ba:	4b82      	ldr	r3, [pc, #520]	; (80015c4 <HAL_RCC_OscConfig+0x4d0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d118      	bne.n	80013f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80013c6:	4b7f      	ldr	r3, [pc, #508]	; (80015c4 <HAL_RCC_OscConfig+0x4d0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a7e      	ldr	r2, [pc, #504]	; (80015c4 <HAL_RCC_OscConfig+0x4d0>)
 80013cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d2:	f7ff fb77 	bl	8000ac4 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013da:	f7ff fb73 	bl	8000ac4 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b64      	cmp	r3, #100	; 0x64
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e120      	b.n	800162e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ec:	4b75      	ldr	r3, [pc, #468]	; (80015c4 <HAL_RCC_OscConfig+0x4d0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d106      	bne.n	800140e <HAL_RCC_OscConfig+0x31a>
 8001400:	4b6f      	ldr	r3, [pc, #444]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 8001402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001404:	4a6e      	ldr	r2, [pc, #440]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6713      	str	r3, [r2, #112]	; 0x70
 800140c:	e02d      	b.n	800146a <HAL_RCC_OscConfig+0x376>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x33c>
 8001416:	4b6a      	ldr	r3, [pc, #424]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 8001418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141a:	4a69      	ldr	r2, [pc, #420]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 800141c:	f023 0301 	bic.w	r3, r3, #1
 8001420:	6713      	str	r3, [r2, #112]	; 0x70
 8001422:	4b67      	ldr	r3, [pc, #412]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001426:	4a66      	ldr	r2, [pc, #408]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 8001428:	f023 0304 	bic.w	r3, r3, #4
 800142c:	6713      	str	r3, [r2, #112]	; 0x70
 800142e:	e01c      	b.n	800146a <HAL_RCC_OscConfig+0x376>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2b05      	cmp	r3, #5
 8001436:	d10c      	bne.n	8001452 <HAL_RCC_OscConfig+0x35e>
 8001438:	4b61      	ldr	r3, [pc, #388]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 800143a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143c:	4a60      	ldr	r2, [pc, #384]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6713      	str	r3, [r2, #112]	; 0x70
 8001444:	4b5e      	ldr	r3, [pc, #376]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 8001446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001448:	4a5d      	ldr	r2, [pc, #372]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6713      	str	r3, [r2, #112]	; 0x70
 8001450:	e00b      	b.n	800146a <HAL_RCC_OscConfig+0x376>
 8001452:	4b5b      	ldr	r3, [pc, #364]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 8001454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001456:	4a5a      	ldr	r2, [pc, #360]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 8001458:	f023 0301 	bic.w	r3, r3, #1
 800145c:	6713      	str	r3, [r2, #112]	; 0x70
 800145e:	4b58      	ldr	r3, [pc, #352]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 8001460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001462:	4a57      	ldr	r2, [pc, #348]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 8001464:	f023 0304 	bic.w	r3, r3, #4
 8001468:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d015      	beq.n	800149e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001472:	f7ff fb27 	bl	8000ac4 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001478:	e00a      	b.n	8001490 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff fb23 	bl	8000ac4 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f241 3288 	movw	r2, #5000	; 0x1388
 8001488:	4293      	cmp	r3, r2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e0ce      	b.n	800162e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001490:	4b4b      	ldr	r3, [pc, #300]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 8001492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0ee      	beq.n	800147a <HAL_RCC_OscConfig+0x386>
 800149c:	e014      	b.n	80014c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149e:	f7ff fb11 	bl	8000ac4 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a4:	e00a      	b.n	80014bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f7ff fb0d 	bl	8000ac4 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e0b8      	b.n	800162e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014bc:	4b40      	ldr	r3, [pc, #256]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 80014be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1ee      	bne.n	80014a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d105      	bne.n	80014da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ce:	4b3c      	ldr	r3, [pc, #240]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a3b      	ldr	r2, [pc, #236]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 80014d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 80a4 	beq.w	800162c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014e4:	4b36      	ldr	r3, [pc, #216]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 030c 	and.w	r3, r3, #12
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d06b      	beq.n	80015c8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d149      	bne.n	800158c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f8:	4b31      	ldr	r3, [pc, #196]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a30      	ldr	r2, [pc, #192]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 80014fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001504:	f7ff fade 	bl	8000ac4 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150c:	f7ff fada 	bl	8000ac4 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e087      	b.n	800162e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151e:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69da      	ldr	r2, [r3, #28]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	019b      	lsls	r3, r3, #6
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	085b      	lsrs	r3, r3, #1
 8001542:	3b01      	subs	r3, #1
 8001544:	041b      	lsls	r3, r3, #16
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154c:	061b      	lsls	r3, r3, #24
 800154e:	4313      	orrs	r3, r2
 8001550:	4a1b      	ldr	r2, [pc, #108]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 8001552:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001556:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a18      	ldr	r2, [pc, #96]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 800155e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff faae 	bl	8000ac4 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156c:	f7ff faaa 	bl	8000ac4 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e057      	b.n	800162e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f0      	beq.n	800156c <HAL_RCC_OscConfig+0x478>
 800158a:	e04f      	b.n	800162c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 8001592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff fa94 	bl	8000ac4 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff fa90 	bl	8000ac4 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e03d      	b.n	800162e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b2:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <HAL_RCC_OscConfig+0x4cc>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x4ac>
 80015be:	e035      	b.n	800162c <HAL_RCC_OscConfig+0x538>
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <HAL_RCC_OscConfig+0x544>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d028      	beq.n	8001628 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d121      	bne.n	8001628 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d11a      	bne.n	8001628 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015f8:	4013      	ands	r3, r2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001600:	4293      	cmp	r3, r2
 8001602:	d111      	bne.n	8001628 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160e:	085b      	lsrs	r3, r3, #1
 8001610:	3b01      	subs	r3, #1
 8001612:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001614:	429a      	cmp	r2, r3
 8001616:	d107      	bne.n	8001628 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001622:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800

0800163c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0d0      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001654:	4b6a      	ldr	r3, [pc, #424]	; (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 030f 	and.w	r3, r3, #15
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d910      	bls.n	8001684 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001662:	4b67      	ldr	r3, [pc, #412]	; (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f023 020f 	bic.w	r2, r3, #15
 800166a:	4965      	ldr	r1, [pc, #404]	; (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001672:	4b63      	ldr	r3, [pc, #396]	; (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d001      	beq.n	8001684 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0b8      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d020      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800169c:	4b59      	ldr	r3, [pc, #356]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4a58      	ldr	r2, [pc, #352]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80016a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016b4:	4b53      	ldr	r3, [pc, #332]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a52      	ldr	r2, [pc, #328]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80016ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c0:	4b50      	ldr	r3, [pc, #320]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	494d      	ldr	r1, [pc, #308]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d040      	beq.n	8001760 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d107      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	4b47      	ldr	r3, [pc, #284]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d115      	bne.n	800171e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e07f      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d107      	bne.n	800170e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fe:	4b41      	ldr	r3, [pc, #260]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d109      	bne.n	800171e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e073      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170e:	4b3d      	ldr	r3, [pc, #244]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e06b      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800171e:	4b39      	ldr	r3, [pc, #228]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f023 0203 	bic.w	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4936      	ldr	r1, [pc, #216]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 800172c:	4313      	orrs	r3, r2
 800172e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001730:	f7ff f9c8 	bl	8000ac4 <HAL_GetTick>
 8001734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	e00a      	b.n	800174e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001738:	f7ff f9c4 	bl	8000ac4 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	; 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e053      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174e:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 020c 	and.w	r2, r3, #12
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	429a      	cmp	r2, r3
 800175e:	d1eb      	bne.n	8001738 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001760:	4b27      	ldr	r3, [pc, #156]	; (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 030f 	and.w	r3, r3, #15
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d210      	bcs.n	8001790 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b24      	ldr	r3, [pc, #144]	; (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 020f 	bic.w	r2, r3, #15
 8001776:	4922      	ldr	r1, [pc, #136]	; (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	4313      	orrs	r3, r2
 800177c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d001      	beq.n	8001790 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e032      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	4916      	ldr	r1, [pc, #88]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d009      	beq.n	80017ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	490e      	ldr	r1, [pc, #56]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ce:	f000 f821 	bl	8001814 <HAL_RCC_GetSysClockFreq>
 80017d2:	4602      	mov	r2, r0
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	490a      	ldr	r1, [pc, #40]	; (8001808 <HAL_RCC_ClockConfig+0x1cc>)
 80017e0:	5ccb      	ldrb	r3, [r1, r3]
 80017e2:	fa22 f303 	lsr.w	r3, r2, r3
 80017e6:	4a09      	ldr	r2, [pc, #36]	; (800180c <HAL_RCC_ClockConfig+0x1d0>)
 80017e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_RCC_ClockConfig+0x1d4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff f924 	bl	8000a3c <HAL_InitTick>

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023c00 	.word	0x40023c00
 8001804:	40023800 	.word	0x40023800
 8001808:	08002944 	.word	0x08002944
 800180c:	20000000 	.word	0x20000000
 8001810:	20000004 	.word	0x20000004

08001814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001818:	b090      	sub	sp, #64	; 0x40
 800181a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	637b      	str	r3, [r7, #52]	; 0x34
 8001820:	2300      	movs	r3, #0
 8001822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001824:	2300      	movs	r3, #0
 8001826:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800182c:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b08      	cmp	r3, #8
 8001836:	d00d      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0x40>
 8001838:	2b08      	cmp	r3, #8
 800183a:	f200 80a1 	bhi.w	8001980 <HAL_RCC_GetSysClockFreq+0x16c>
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x34>
 8001842:	2b04      	cmp	r3, #4
 8001844:	d003      	beq.n	800184e <HAL_RCC_GetSysClockFreq+0x3a>
 8001846:	e09b      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <HAL_RCC_GetSysClockFreq+0x184>)
 800184a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800184c:	e09b      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800184e:	4b53      	ldr	r3, [pc, #332]	; (800199c <HAL_RCC_GetSysClockFreq+0x188>)
 8001850:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001852:	e098      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001854:	4b4f      	ldr	r3, [pc, #316]	; (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800185c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800185e:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d028      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800186a:	4b4a      	ldr	r3, [pc, #296]	; (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	099b      	lsrs	r3, r3, #6
 8001870:	2200      	movs	r2, #0
 8001872:	623b      	str	r3, [r7, #32]
 8001874:	627a      	str	r2, [r7, #36]	; 0x24
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800187c:	2100      	movs	r1, #0
 800187e:	4b47      	ldr	r3, [pc, #284]	; (800199c <HAL_RCC_GetSysClockFreq+0x188>)
 8001880:	fb03 f201 	mul.w	r2, r3, r1
 8001884:	2300      	movs	r3, #0
 8001886:	fb00 f303 	mul.w	r3, r0, r3
 800188a:	4413      	add	r3, r2
 800188c:	4a43      	ldr	r2, [pc, #268]	; (800199c <HAL_RCC_GetSysClockFreq+0x188>)
 800188e:	fba0 1202 	umull	r1, r2, r0, r2
 8001892:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001894:	460a      	mov	r2, r1
 8001896:	62ba      	str	r2, [r7, #40]	; 0x28
 8001898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800189a:	4413      	add	r3, r2
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800189e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a0:	2200      	movs	r2, #0
 80018a2:	61bb      	str	r3, [r7, #24]
 80018a4:	61fa      	str	r2, [r7, #28]
 80018a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018ae:	f7fe fcff 	bl	80002b0 <__aeabi_uldivmod>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4613      	mov	r3, r2
 80018b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ba:	e053      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018bc:	4b35      	ldr	r3, [pc, #212]	; (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	099b      	lsrs	r3, r3, #6
 80018c2:	2200      	movs	r2, #0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	617a      	str	r2, [r7, #20]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018ce:	f04f 0b00 	mov.w	fp, #0
 80018d2:	4652      	mov	r2, sl
 80018d4:	465b      	mov	r3, fp
 80018d6:	f04f 0000 	mov.w	r0, #0
 80018da:	f04f 0100 	mov.w	r1, #0
 80018de:	0159      	lsls	r1, r3, #5
 80018e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018e4:	0150      	lsls	r0, r2, #5
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	ebb2 080a 	subs.w	r8, r2, sl
 80018ee:	eb63 090b 	sbc.w	r9, r3, fp
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001902:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001906:	ebb2 0408 	subs.w	r4, r2, r8
 800190a:	eb63 0509 	sbc.w	r5, r3, r9
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	00eb      	lsls	r3, r5, #3
 8001918:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800191c:	00e2      	lsls	r2, r4, #3
 800191e:	4614      	mov	r4, r2
 8001920:	461d      	mov	r5, r3
 8001922:	eb14 030a 	adds.w	r3, r4, sl
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	eb45 030b 	adc.w	r3, r5, fp
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	e9d7 4500 	ldrd	r4, r5, [r7]
 800193a:	4629      	mov	r1, r5
 800193c:	028b      	lsls	r3, r1, #10
 800193e:	4621      	mov	r1, r4
 8001940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001944:	4621      	mov	r1, r4
 8001946:	028a      	lsls	r2, r1, #10
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194e:	2200      	movs	r2, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	60fa      	str	r2, [r7, #12]
 8001954:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001958:	f7fe fcaa 	bl	80002b0 <__aeabi_uldivmod>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4613      	mov	r3, r2
 8001962:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	0c1b      	lsrs	r3, r3, #16
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	3301      	adds	r3, #1
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001974:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001978:	fbb2 f3f3 	udiv	r3, r2, r3
 800197c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800197e:	e002      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_RCC_GetSysClockFreq+0x184>)
 8001982:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001988:	4618      	mov	r0, r3
 800198a:	3740      	adds	r7, #64	; 0x40
 800198c:	46bd      	mov	sp, r7
 800198e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	00f42400 	.word	0x00f42400
 800199c:	017d7840 	.word	0x017d7840

080019a0 <__errno>:
 80019a0:	4b01      	ldr	r3, [pc, #4]	; (80019a8 <__errno+0x8>)
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	2000000c 	.word	0x2000000c

080019ac <__libc_init_array>:
 80019ac:	b570      	push	{r4, r5, r6, lr}
 80019ae:	4d0d      	ldr	r5, [pc, #52]	; (80019e4 <__libc_init_array+0x38>)
 80019b0:	4c0d      	ldr	r4, [pc, #52]	; (80019e8 <__libc_init_array+0x3c>)
 80019b2:	1b64      	subs	r4, r4, r5
 80019b4:	10a4      	asrs	r4, r4, #2
 80019b6:	2600      	movs	r6, #0
 80019b8:	42a6      	cmp	r6, r4
 80019ba:	d109      	bne.n	80019d0 <__libc_init_array+0x24>
 80019bc:	4d0b      	ldr	r5, [pc, #44]	; (80019ec <__libc_init_array+0x40>)
 80019be:	4c0c      	ldr	r4, [pc, #48]	; (80019f0 <__libc_init_array+0x44>)
 80019c0:	f000 ffae 	bl	8002920 <_init>
 80019c4:	1b64      	subs	r4, r4, r5
 80019c6:	10a4      	asrs	r4, r4, #2
 80019c8:	2600      	movs	r6, #0
 80019ca:	42a6      	cmp	r6, r4
 80019cc:	d105      	bne.n	80019da <__libc_init_array+0x2e>
 80019ce:	bd70      	pop	{r4, r5, r6, pc}
 80019d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80019d4:	4798      	blx	r3
 80019d6:	3601      	adds	r6, #1
 80019d8:	e7ee      	b.n	80019b8 <__libc_init_array+0xc>
 80019da:	f855 3b04 	ldr.w	r3, [r5], #4
 80019de:	4798      	blx	r3
 80019e0:	3601      	adds	r6, #1
 80019e2:	e7f2      	b.n	80019ca <__libc_init_array+0x1e>
 80019e4:	080029f4 	.word	0x080029f4
 80019e8:	080029f4 	.word	0x080029f4
 80019ec:	080029f4 	.word	0x080029f4
 80019f0:	080029f8 	.word	0x080029f8

080019f4 <memset>:
 80019f4:	4402      	add	r2, r0
 80019f6:	4603      	mov	r3, r0
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d100      	bne.n	80019fe <memset+0xa>
 80019fc:	4770      	bx	lr
 80019fe:	f803 1b01 	strb.w	r1, [r3], #1
 8001a02:	e7f9      	b.n	80019f8 <memset+0x4>

08001a04 <iprintf>:
 8001a04:	b40f      	push	{r0, r1, r2, r3}
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <iprintf+0x2c>)
 8001a08:	b513      	push	{r0, r1, r4, lr}
 8001a0a:	681c      	ldr	r4, [r3, #0]
 8001a0c:	b124      	cbz	r4, 8001a18 <iprintf+0x14>
 8001a0e:	69a3      	ldr	r3, [r4, #24]
 8001a10:	b913      	cbnz	r3, 8001a18 <iprintf+0x14>
 8001a12:	4620      	mov	r0, r4
 8001a14:	f000 f866 	bl	8001ae4 <__sinit>
 8001a18:	ab05      	add	r3, sp, #20
 8001a1a:	9a04      	ldr	r2, [sp, #16]
 8001a1c:	68a1      	ldr	r1, [r4, #8]
 8001a1e:	9301      	str	r3, [sp, #4]
 8001a20:	4620      	mov	r0, r4
 8001a22:	f000 f9bd 	bl	8001da0 <_vfiprintf_r>
 8001a26:	b002      	add	sp, #8
 8001a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a2c:	b004      	add	sp, #16
 8001a2e:	4770      	bx	lr
 8001a30:	2000000c 	.word	0x2000000c

08001a34 <std>:
 8001a34:	2300      	movs	r3, #0
 8001a36:	b510      	push	{r4, lr}
 8001a38:	4604      	mov	r4, r0
 8001a3a:	e9c0 3300 	strd	r3, r3, [r0]
 8001a3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001a42:	6083      	str	r3, [r0, #8]
 8001a44:	8181      	strh	r1, [r0, #12]
 8001a46:	6643      	str	r3, [r0, #100]	; 0x64
 8001a48:	81c2      	strh	r2, [r0, #14]
 8001a4a:	6183      	str	r3, [r0, #24]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	2208      	movs	r2, #8
 8001a50:	305c      	adds	r0, #92	; 0x5c
 8001a52:	f7ff ffcf 	bl	80019f4 <memset>
 8001a56:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <std+0x38>)
 8001a58:	6263      	str	r3, [r4, #36]	; 0x24
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <std+0x3c>)
 8001a5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <std+0x40>)
 8001a60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <std+0x44>)
 8001a64:	6224      	str	r4, [r4, #32]
 8001a66:	6323      	str	r3, [r4, #48]	; 0x30
 8001a68:	bd10      	pop	{r4, pc}
 8001a6a:	bf00      	nop
 8001a6c:	08002349 	.word	0x08002349
 8001a70:	0800236b 	.word	0x0800236b
 8001a74:	080023a3 	.word	0x080023a3
 8001a78:	080023c7 	.word	0x080023c7

08001a7c <_cleanup_r>:
 8001a7c:	4901      	ldr	r1, [pc, #4]	; (8001a84 <_cleanup_r+0x8>)
 8001a7e:	f000 b8af 	b.w	8001be0 <_fwalk_reent>
 8001a82:	bf00      	nop
 8001a84:	080026a1 	.word	0x080026a1

08001a88 <__sfmoreglue>:
 8001a88:	b570      	push	{r4, r5, r6, lr}
 8001a8a:	2268      	movs	r2, #104	; 0x68
 8001a8c:	1e4d      	subs	r5, r1, #1
 8001a8e:	4355      	muls	r5, r2
 8001a90:	460e      	mov	r6, r1
 8001a92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001a96:	f000 f8e5 	bl	8001c64 <_malloc_r>
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	b140      	cbz	r0, 8001ab0 <__sfmoreglue+0x28>
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	e9c0 1600 	strd	r1, r6, [r0]
 8001aa4:	300c      	adds	r0, #12
 8001aa6:	60a0      	str	r0, [r4, #8]
 8001aa8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001aac:	f7ff ffa2 	bl	80019f4 <memset>
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	bd70      	pop	{r4, r5, r6, pc}

08001ab4 <__sfp_lock_acquire>:
 8001ab4:	4801      	ldr	r0, [pc, #4]	; (8001abc <__sfp_lock_acquire+0x8>)
 8001ab6:	f000 b8b3 	b.w	8001c20 <__retarget_lock_acquire_recursive>
 8001aba:	bf00      	nop
 8001abc:	20000095 	.word	0x20000095

08001ac0 <__sfp_lock_release>:
 8001ac0:	4801      	ldr	r0, [pc, #4]	; (8001ac8 <__sfp_lock_release+0x8>)
 8001ac2:	f000 b8ae 	b.w	8001c22 <__retarget_lock_release_recursive>
 8001ac6:	bf00      	nop
 8001ac8:	20000095 	.word	0x20000095

08001acc <__sinit_lock_acquire>:
 8001acc:	4801      	ldr	r0, [pc, #4]	; (8001ad4 <__sinit_lock_acquire+0x8>)
 8001ace:	f000 b8a7 	b.w	8001c20 <__retarget_lock_acquire_recursive>
 8001ad2:	bf00      	nop
 8001ad4:	20000096 	.word	0x20000096

08001ad8 <__sinit_lock_release>:
 8001ad8:	4801      	ldr	r0, [pc, #4]	; (8001ae0 <__sinit_lock_release+0x8>)
 8001ada:	f000 b8a2 	b.w	8001c22 <__retarget_lock_release_recursive>
 8001ade:	bf00      	nop
 8001ae0:	20000096 	.word	0x20000096

08001ae4 <__sinit>:
 8001ae4:	b510      	push	{r4, lr}
 8001ae6:	4604      	mov	r4, r0
 8001ae8:	f7ff fff0 	bl	8001acc <__sinit_lock_acquire>
 8001aec:	69a3      	ldr	r3, [r4, #24]
 8001aee:	b11b      	cbz	r3, 8001af8 <__sinit+0x14>
 8001af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001af4:	f7ff bff0 	b.w	8001ad8 <__sinit_lock_release>
 8001af8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001afc:	6523      	str	r3, [r4, #80]	; 0x50
 8001afe:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <__sinit+0x68>)
 8001b00:	4a13      	ldr	r2, [pc, #76]	; (8001b50 <__sinit+0x6c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	62a2      	str	r2, [r4, #40]	; 0x28
 8001b06:	42a3      	cmp	r3, r4
 8001b08:	bf04      	itt	eq
 8001b0a:	2301      	moveq	r3, #1
 8001b0c:	61a3      	streq	r3, [r4, #24]
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f000 f820 	bl	8001b54 <__sfp>
 8001b14:	6060      	str	r0, [r4, #4]
 8001b16:	4620      	mov	r0, r4
 8001b18:	f000 f81c 	bl	8001b54 <__sfp>
 8001b1c:	60a0      	str	r0, [r4, #8]
 8001b1e:	4620      	mov	r0, r4
 8001b20:	f000 f818 	bl	8001b54 <__sfp>
 8001b24:	2200      	movs	r2, #0
 8001b26:	60e0      	str	r0, [r4, #12]
 8001b28:	2104      	movs	r1, #4
 8001b2a:	6860      	ldr	r0, [r4, #4]
 8001b2c:	f7ff ff82 	bl	8001a34 <std>
 8001b30:	68a0      	ldr	r0, [r4, #8]
 8001b32:	2201      	movs	r2, #1
 8001b34:	2109      	movs	r1, #9
 8001b36:	f7ff ff7d 	bl	8001a34 <std>
 8001b3a:	68e0      	ldr	r0, [r4, #12]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	2112      	movs	r1, #18
 8001b40:	f7ff ff78 	bl	8001a34 <std>
 8001b44:	2301      	movs	r3, #1
 8001b46:	61a3      	str	r3, [r4, #24]
 8001b48:	e7d2      	b.n	8001af0 <__sinit+0xc>
 8001b4a:	bf00      	nop
 8001b4c:	08002954 	.word	0x08002954
 8001b50:	08001a7d 	.word	0x08001a7d

08001b54 <__sfp>:
 8001b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b56:	4607      	mov	r7, r0
 8001b58:	f7ff ffac 	bl	8001ab4 <__sfp_lock_acquire>
 8001b5c:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <__sfp+0x84>)
 8001b5e:	681e      	ldr	r6, [r3, #0]
 8001b60:	69b3      	ldr	r3, [r6, #24]
 8001b62:	b913      	cbnz	r3, 8001b6a <__sfp+0x16>
 8001b64:	4630      	mov	r0, r6
 8001b66:	f7ff ffbd 	bl	8001ae4 <__sinit>
 8001b6a:	3648      	adds	r6, #72	; 0x48
 8001b6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001b70:	3b01      	subs	r3, #1
 8001b72:	d503      	bpl.n	8001b7c <__sfp+0x28>
 8001b74:	6833      	ldr	r3, [r6, #0]
 8001b76:	b30b      	cbz	r3, 8001bbc <__sfp+0x68>
 8001b78:	6836      	ldr	r6, [r6, #0]
 8001b7a:	e7f7      	b.n	8001b6c <__sfp+0x18>
 8001b7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001b80:	b9d5      	cbnz	r5, 8001bb8 <__sfp+0x64>
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <__sfp+0x88>)
 8001b84:	60e3      	str	r3, [r4, #12]
 8001b86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001b8a:	6665      	str	r5, [r4, #100]	; 0x64
 8001b8c:	f000 f847 	bl	8001c1e <__retarget_lock_init_recursive>
 8001b90:	f7ff ff96 	bl	8001ac0 <__sfp_lock_release>
 8001b94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001b98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001b9c:	6025      	str	r5, [r4, #0]
 8001b9e:	61a5      	str	r5, [r4, #24]
 8001ba0:	2208      	movs	r2, #8
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ba8:	f7ff ff24 	bl	80019f4 <memset>
 8001bac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001bb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bb8:	3468      	adds	r4, #104	; 0x68
 8001bba:	e7d9      	b.n	8001b70 <__sfp+0x1c>
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	4638      	mov	r0, r7
 8001bc0:	f7ff ff62 	bl	8001a88 <__sfmoreglue>
 8001bc4:	4604      	mov	r4, r0
 8001bc6:	6030      	str	r0, [r6, #0]
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	d1d5      	bne.n	8001b78 <__sfp+0x24>
 8001bcc:	f7ff ff78 	bl	8001ac0 <__sfp_lock_release>
 8001bd0:	230c      	movs	r3, #12
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	e7ee      	b.n	8001bb4 <__sfp+0x60>
 8001bd6:	bf00      	nop
 8001bd8:	08002954 	.word	0x08002954
 8001bdc:	ffff0001 	.word	0xffff0001

08001be0 <_fwalk_reent>:
 8001be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001be4:	4606      	mov	r6, r0
 8001be6:	4688      	mov	r8, r1
 8001be8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001bec:	2700      	movs	r7, #0
 8001bee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001bf2:	f1b9 0901 	subs.w	r9, r9, #1
 8001bf6:	d505      	bpl.n	8001c04 <_fwalk_reent+0x24>
 8001bf8:	6824      	ldr	r4, [r4, #0]
 8001bfa:	2c00      	cmp	r4, #0
 8001bfc:	d1f7      	bne.n	8001bee <_fwalk_reent+0xe>
 8001bfe:	4638      	mov	r0, r7
 8001c00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c04:	89ab      	ldrh	r3, [r5, #12]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d907      	bls.n	8001c1a <_fwalk_reent+0x3a>
 8001c0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	d003      	beq.n	8001c1a <_fwalk_reent+0x3a>
 8001c12:	4629      	mov	r1, r5
 8001c14:	4630      	mov	r0, r6
 8001c16:	47c0      	blx	r8
 8001c18:	4307      	orrs	r7, r0
 8001c1a:	3568      	adds	r5, #104	; 0x68
 8001c1c:	e7e9      	b.n	8001bf2 <_fwalk_reent+0x12>

08001c1e <__retarget_lock_init_recursive>:
 8001c1e:	4770      	bx	lr

08001c20 <__retarget_lock_acquire_recursive>:
 8001c20:	4770      	bx	lr

08001c22 <__retarget_lock_release_recursive>:
 8001c22:	4770      	bx	lr

08001c24 <sbrk_aligned>:
 8001c24:	b570      	push	{r4, r5, r6, lr}
 8001c26:	4e0e      	ldr	r6, [pc, #56]	; (8001c60 <sbrk_aligned+0x3c>)
 8001c28:	460c      	mov	r4, r1
 8001c2a:	6831      	ldr	r1, [r6, #0]
 8001c2c:	4605      	mov	r5, r0
 8001c2e:	b911      	cbnz	r1, 8001c36 <sbrk_aligned+0x12>
 8001c30:	f000 fb7a 	bl	8002328 <_sbrk_r>
 8001c34:	6030      	str	r0, [r6, #0]
 8001c36:	4621      	mov	r1, r4
 8001c38:	4628      	mov	r0, r5
 8001c3a:	f000 fb75 	bl	8002328 <_sbrk_r>
 8001c3e:	1c43      	adds	r3, r0, #1
 8001c40:	d00a      	beq.n	8001c58 <sbrk_aligned+0x34>
 8001c42:	1cc4      	adds	r4, r0, #3
 8001c44:	f024 0403 	bic.w	r4, r4, #3
 8001c48:	42a0      	cmp	r0, r4
 8001c4a:	d007      	beq.n	8001c5c <sbrk_aligned+0x38>
 8001c4c:	1a21      	subs	r1, r4, r0
 8001c4e:	4628      	mov	r0, r5
 8001c50:	f000 fb6a 	bl	8002328 <_sbrk_r>
 8001c54:	3001      	adds	r0, #1
 8001c56:	d101      	bne.n	8001c5c <sbrk_aligned+0x38>
 8001c58:	f04f 34ff 	mov.w	r4, #4294967295
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	bd70      	pop	{r4, r5, r6, pc}
 8001c60:	2000009c 	.word	0x2000009c

08001c64 <_malloc_r>:
 8001c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c68:	1ccd      	adds	r5, r1, #3
 8001c6a:	f025 0503 	bic.w	r5, r5, #3
 8001c6e:	3508      	adds	r5, #8
 8001c70:	2d0c      	cmp	r5, #12
 8001c72:	bf38      	it	cc
 8001c74:	250c      	movcc	r5, #12
 8001c76:	2d00      	cmp	r5, #0
 8001c78:	4607      	mov	r7, r0
 8001c7a:	db01      	blt.n	8001c80 <_malloc_r+0x1c>
 8001c7c:	42a9      	cmp	r1, r5
 8001c7e:	d905      	bls.n	8001c8c <_malloc_r+0x28>
 8001c80:	230c      	movs	r3, #12
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	2600      	movs	r6, #0
 8001c86:	4630      	mov	r0, r6
 8001c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c8c:	4e2e      	ldr	r6, [pc, #184]	; (8001d48 <_malloc_r+0xe4>)
 8001c8e:	f000 fdbb 	bl	8002808 <__malloc_lock>
 8001c92:	6833      	ldr	r3, [r6, #0]
 8001c94:	461c      	mov	r4, r3
 8001c96:	bb34      	cbnz	r4, 8001ce6 <_malloc_r+0x82>
 8001c98:	4629      	mov	r1, r5
 8001c9a:	4638      	mov	r0, r7
 8001c9c:	f7ff ffc2 	bl	8001c24 <sbrk_aligned>
 8001ca0:	1c43      	adds	r3, r0, #1
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	d14d      	bne.n	8001d42 <_malloc_r+0xde>
 8001ca6:	6834      	ldr	r4, [r6, #0]
 8001ca8:	4626      	mov	r6, r4
 8001caa:	2e00      	cmp	r6, #0
 8001cac:	d140      	bne.n	8001d30 <_malloc_r+0xcc>
 8001cae:	6823      	ldr	r3, [r4, #0]
 8001cb0:	4631      	mov	r1, r6
 8001cb2:	4638      	mov	r0, r7
 8001cb4:	eb04 0803 	add.w	r8, r4, r3
 8001cb8:	f000 fb36 	bl	8002328 <_sbrk_r>
 8001cbc:	4580      	cmp	r8, r0
 8001cbe:	d13a      	bne.n	8001d36 <_malloc_r+0xd2>
 8001cc0:	6821      	ldr	r1, [r4, #0]
 8001cc2:	3503      	adds	r5, #3
 8001cc4:	1a6d      	subs	r5, r5, r1
 8001cc6:	f025 0503 	bic.w	r5, r5, #3
 8001cca:	3508      	adds	r5, #8
 8001ccc:	2d0c      	cmp	r5, #12
 8001cce:	bf38      	it	cc
 8001cd0:	250c      	movcc	r5, #12
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	4638      	mov	r0, r7
 8001cd6:	f7ff ffa5 	bl	8001c24 <sbrk_aligned>
 8001cda:	3001      	adds	r0, #1
 8001cdc:	d02b      	beq.n	8001d36 <_malloc_r+0xd2>
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	442b      	add	r3, r5
 8001ce2:	6023      	str	r3, [r4, #0]
 8001ce4:	e00e      	b.n	8001d04 <_malloc_r+0xa0>
 8001ce6:	6822      	ldr	r2, [r4, #0]
 8001ce8:	1b52      	subs	r2, r2, r5
 8001cea:	d41e      	bmi.n	8001d2a <_malloc_r+0xc6>
 8001cec:	2a0b      	cmp	r2, #11
 8001cee:	d916      	bls.n	8001d1e <_malloc_r+0xba>
 8001cf0:	1961      	adds	r1, r4, r5
 8001cf2:	42a3      	cmp	r3, r4
 8001cf4:	6025      	str	r5, [r4, #0]
 8001cf6:	bf18      	it	ne
 8001cf8:	6059      	strne	r1, [r3, #4]
 8001cfa:	6863      	ldr	r3, [r4, #4]
 8001cfc:	bf08      	it	eq
 8001cfe:	6031      	streq	r1, [r6, #0]
 8001d00:	5162      	str	r2, [r4, r5]
 8001d02:	604b      	str	r3, [r1, #4]
 8001d04:	4638      	mov	r0, r7
 8001d06:	f104 060b 	add.w	r6, r4, #11
 8001d0a:	f000 fd83 	bl	8002814 <__malloc_unlock>
 8001d0e:	f026 0607 	bic.w	r6, r6, #7
 8001d12:	1d23      	adds	r3, r4, #4
 8001d14:	1af2      	subs	r2, r6, r3
 8001d16:	d0b6      	beq.n	8001c86 <_malloc_r+0x22>
 8001d18:	1b9b      	subs	r3, r3, r6
 8001d1a:	50a3      	str	r3, [r4, r2]
 8001d1c:	e7b3      	b.n	8001c86 <_malloc_r+0x22>
 8001d1e:	6862      	ldr	r2, [r4, #4]
 8001d20:	42a3      	cmp	r3, r4
 8001d22:	bf0c      	ite	eq
 8001d24:	6032      	streq	r2, [r6, #0]
 8001d26:	605a      	strne	r2, [r3, #4]
 8001d28:	e7ec      	b.n	8001d04 <_malloc_r+0xa0>
 8001d2a:	4623      	mov	r3, r4
 8001d2c:	6864      	ldr	r4, [r4, #4]
 8001d2e:	e7b2      	b.n	8001c96 <_malloc_r+0x32>
 8001d30:	4634      	mov	r4, r6
 8001d32:	6876      	ldr	r6, [r6, #4]
 8001d34:	e7b9      	b.n	8001caa <_malloc_r+0x46>
 8001d36:	230c      	movs	r3, #12
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	4638      	mov	r0, r7
 8001d3c:	f000 fd6a 	bl	8002814 <__malloc_unlock>
 8001d40:	e7a1      	b.n	8001c86 <_malloc_r+0x22>
 8001d42:	6025      	str	r5, [r4, #0]
 8001d44:	e7de      	b.n	8001d04 <_malloc_r+0xa0>
 8001d46:	bf00      	nop
 8001d48:	20000098 	.word	0x20000098

08001d4c <__sfputc_r>:
 8001d4c:	6893      	ldr	r3, [r2, #8]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	b410      	push	{r4}
 8001d54:	6093      	str	r3, [r2, #8]
 8001d56:	da08      	bge.n	8001d6a <__sfputc_r+0x1e>
 8001d58:	6994      	ldr	r4, [r2, #24]
 8001d5a:	42a3      	cmp	r3, r4
 8001d5c:	db01      	blt.n	8001d62 <__sfputc_r+0x16>
 8001d5e:	290a      	cmp	r1, #10
 8001d60:	d103      	bne.n	8001d6a <__sfputc_r+0x1e>
 8001d62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d66:	f000 bb33 	b.w	80023d0 <__swbuf_r>
 8001d6a:	6813      	ldr	r3, [r2, #0]
 8001d6c:	1c58      	adds	r0, r3, #1
 8001d6e:	6010      	str	r0, [r2, #0]
 8001d70:	7019      	strb	r1, [r3, #0]
 8001d72:	4608      	mov	r0, r1
 8001d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <__sfputs_r>:
 8001d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d7c:	4606      	mov	r6, r0
 8001d7e:	460f      	mov	r7, r1
 8001d80:	4614      	mov	r4, r2
 8001d82:	18d5      	adds	r5, r2, r3
 8001d84:	42ac      	cmp	r4, r5
 8001d86:	d101      	bne.n	8001d8c <__sfputs_r+0x12>
 8001d88:	2000      	movs	r0, #0
 8001d8a:	e007      	b.n	8001d9c <__sfputs_r+0x22>
 8001d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d90:	463a      	mov	r2, r7
 8001d92:	4630      	mov	r0, r6
 8001d94:	f7ff ffda 	bl	8001d4c <__sfputc_r>
 8001d98:	1c43      	adds	r3, r0, #1
 8001d9a:	d1f3      	bne.n	8001d84 <__sfputs_r+0xa>
 8001d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001da0 <_vfiprintf_r>:
 8001da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001da4:	460d      	mov	r5, r1
 8001da6:	b09d      	sub	sp, #116	; 0x74
 8001da8:	4614      	mov	r4, r2
 8001daa:	4698      	mov	r8, r3
 8001dac:	4606      	mov	r6, r0
 8001dae:	b118      	cbz	r0, 8001db8 <_vfiprintf_r+0x18>
 8001db0:	6983      	ldr	r3, [r0, #24]
 8001db2:	b90b      	cbnz	r3, 8001db8 <_vfiprintf_r+0x18>
 8001db4:	f7ff fe96 	bl	8001ae4 <__sinit>
 8001db8:	4b89      	ldr	r3, [pc, #548]	; (8001fe0 <_vfiprintf_r+0x240>)
 8001dba:	429d      	cmp	r5, r3
 8001dbc:	d11b      	bne.n	8001df6 <_vfiprintf_r+0x56>
 8001dbe:	6875      	ldr	r5, [r6, #4]
 8001dc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001dc2:	07d9      	lsls	r1, r3, #31
 8001dc4:	d405      	bmi.n	8001dd2 <_vfiprintf_r+0x32>
 8001dc6:	89ab      	ldrh	r3, [r5, #12]
 8001dc8:	059a      	lsls	r2, r3, #22
 8001dca:	d402      	bmi.n	8001dd2 <_vfiprintf_r+0x32>
 8001dcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001dce:	f7ff ff27 	bl	8001c20 <__retarget_lock_acquire_recursive>
 8001dd2:	89ab      	ldrh	r3, [r5, #12]
 8001dd4:	071b      	lsls	r3, r3, #28
 8001dd6:	d501      	bpl.n	8001ddc <_vfiprintf_r+0x3c>
 8001dd8:	692b      	ldr	r3, [r5, #16]
 8001dda:	b9eb      	cbnz	r3, 8001e18 <_vfiprintf_r+0x78>
 8001ddc:	4629      	mov	r1, r5
 8001dde:	4630      	mov	r0, r6
 8001de0:	f000 fb5a 	bl	8002498 <__swsetup_r>
 8001de4:	b1c0      	cbz	r0, 8001e18 <_vfiprintf_r+0x78>
 8001de6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001de8:	07dc      	lsls	r4, r3, #31
 8001dea:	d50e      	bpl.n	8001e0a <_vfiprintf_r+0x6a>
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295
 8001df0:	b01d      	add	sp, #116	; 0x74
 8001df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001df6:	4b7b      	ldr	r3, [pc, #492]	; (8001fe4 <_vfiprintf_r+0x244>)
 8001df8:	429d      	cmp	r5, r3
 8001dfa:	d101      	bne.n	8001e00 <_vfiprintf_r+0x60>
 8001dfc:	68b5      	ldr	r5, [r6, #8]
 8001dfe:	e7df      	b.n	8001dc0 <_vfiprintf_r+0x20>
 8001e00:	4b79      	ldr	r3, [pc, #484]	; (8001fe8 <_vfiprintf_r+0x248>)
 8001e02:	429d      	cmp	r5, r3
 8001e04:	bf08      	it	eq
 8001e06:	68f5      	ldreq	r5, [r6, #12]
 8001e08:	e7da      	b.n	8001dc0 <_vfiprintf_r+0x20>
 8001e0a:	89ab      	ldrh	r3, [r5, #12]
 8001e0c:	0598      	lsls	r0, r3, #22
 8001e0e:	d4ed      	bmi.n	8001dec <_vfiprintf_r+0x4c>
 8001e10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e12:	f7ff ff06 	bl	8001c22 <__retarget_lock_release_recursive>
 8001e16:	e7e9      	b.n	8001dec <_vfiprintf_r+0x4c>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8001e1c:	2320      	movs	r3, #32
 8001e1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001e22:	f8cd 800c 	str.w	r8, [sp, #12]
 8001e26:	2330      	movs	r3, #48	; 0x30
 8001e28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001fec <_vfiprintf_r+0x24c>
 8001e2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001e30:	f04f 0901 	mov.w	r9, #1
 8001e34:	4623      	mov	r3, r4
 8001e36:	469a      	mov	sl, r3
 8001e38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e3c:	b10a      	cbz	r2, 8001e42 <_vfiprintf_r+0xa2>
 8001e3e:	2a25      	cmp	r2, #37	; 0x25
 8001e40:	d1f9      	bne.n	8001e36 <_vfiprintf_r+0x96>
 8001e42:	ebba 0b04 	subs.w	fp, sl, r4
 8001e46:	d00b      	beq.n	8001e60 <_vfiprintf_r+0xc0>
 8001e48:	465b      	mov	r3, fp
 8001e4a:	4622      	mov	r2, r4
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	4630      	mov	r0, r6
 8001e50:	f7ff ff93 	bl	8001d7a <__sfputs_r>
 8001e54:	3001      	adds	r0, #1
 8001e56:	f000 80aa 	beq.w	8001fae <_vfiprintf_r+0x20e>
 8001e5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001e5c:	445a      	add	r2, fp
 8001e5e:	9209      	str	r2, [sp, #36]	; 0x24
 8001e60:	f89a 3000 	ldrb.w	r3, [sl]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80a2 	beq.w	8001fae <_vfiprintf_r+0x20e>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001e74:	f10a 0a01 	add.w	sl, sl, #1
 8001e78:	9304      	str	r3, [sp, #16]
 8001e7a:	9307      	str	r3, [sp, #28]
 8001e7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001e80:	931a      	str	r3, [sp, #104]	; 0x68
 8001e82:	4654      	mov	r4, sl
 8001e84:	2205      	movs	r2, #5
 8001e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e8a:	4858      	ldr	r0, [pc, #352]	; (8001fec <_vfiprintf_r+0x24c>)
 8001e8c:	f7fe f9c0 	bl	8000210 <memchr>
 8001e90:	9a04      	ldr	r2, [sp, #16]
 8001e92:	b9d8      	cbnz	r0, 8001ecc <_vfiprintf_r+0x12c>
 8001e94:	06d1      	lsls	r1, r2, #27
 8001e96:	bf44      	itt	mi
 8001e98:	2320      	movmi	r3, #32
 8001e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e9e:	0713      	lsls	r3, r2, #28
 8001ea0:	bf44      	itt	mi
 8001ea2:	232b      	movmi	r3, #43	; 0x2b
 8001ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8001eac:	2b2a      	cmp	r3, #42	; 0x2a
 8001eae:	d015      	beq.n	8001edc <_vfiprintf_r+0x13c>
 8001eb0:	9a07      	ldr	r2, [sp, #28]
 8001eb2:	4654      	mov	r4, sl
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f04f 0c0a 	mov.w	ip, #10
 8001eba:	4621      	mov	r1, r4
 8001ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ec0:	3b30      	subs	r3, #48	; 0x30
 8001ec2:	2b09      	cmp	r3, #9
 8001ec4:	d94e      	bls.n	8001f64 <_vfiprintf_r+0x1c4>
 8001ec6:	b1b0      	cbz	r0, 8001ef6 <_vfiprintf_r+0x156>
 8001ec8:	9207      	str	r2, [sp, #28]
 8001eca:	e014      	b.n	8001ef6 <_vfiprintf_r+0x156>
 8001ecc:	eba0 0308 	sub.w	r3, r0, r8
 8001ed0:	fa09 f303 	lsl.w	r3, r9, r3
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	9304      	str	r3, [sp, #16]
 8001ed8:	46a2      	mov	sl, r4
 8001eda:	e7d2      	b.n	8001e82 <_vfiprintf_r+0xe2>
 8001edc:	9b03      	ldr	r3, [sp, #12]
 8001ede:	1d19      	adds	r1, r3, #4
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	9103      	str	r1, [sp, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bfbb      	ittet	lt
 8001ee8:	425b      	neglt	r3, r3
 8001eea:	f042 0202 	orrlt.w	r2, r2, #2
 8001eee:	9307      	strge	r3, [sp, #28]
 8001ef0:	9307      	strlt	r3, [sp, #28]
 8001ef2:	bfb8      	it	lt
 8001ef4:	9204      	strlt	r2, [sp, #16]
 8001ef6:	7823      	ldrb	r3, [r4, #0]
 8001ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8001efa:	d10c      	bne.n	8001f16 <_vfiprintf_r+0x176>
 8001efc:	7863      	ldrb	r3, [r4, #1]
 8001efe:	2b2a      	cmp	r3, #42	; 0x2a
 8001f00:	d135      	bne.n	8001f6e <_vfiprintf_r+0x1ce>
 8001f02:	9b03      	ldr	r3, [sp, #12]
 8001f04:	1d1a      	adds	r2, r3, #4
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	9203      	str	r2, [sp, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	bfb8      	it	lt
 8001f0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001f12:	3402      	adds	r4, #2
 8001f14:	9305      	str	r3, [sp, #20]
 8001f16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001ffc <_vfiprintf_r+0x25c>
 8001f1a:	7821      	ldrb	r1, [r4, #0]
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	4650      	mov	r0, sl
 8001f20:	f7fe f976 	bl	8000210 <memchr>
 8001f24:	b140      	cbz	r0, 8001f38 <_vfiprintf_r+0x198>
 8001f26:	2340      	movs	r3, #64	; 0x40
 8001f28:	eba0 000a 	sub.w	r0, r0, sl
 8001f2c:	fa03 f000 	lsl.w	r0, r3, r0
 8001f30:	9b04      	ldr	r3, [sp, #16]
 8001f32:	4303      	orrs	r3, r0
 8001f34:	3401      	adds	r4, #1
 8001f36:	9304      	str	r3, [sp, #16]
 8001f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f3c:	482c      	ldr	r0, [pc, #176]	; (8001ff0 <_vfiprintf_r+0x250>)
 8001f3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001f42:	2206      	movs	r2, #6
 8001f44:	f7fe f964 	bl	8000210 <memchr>
 8001f48:	2800      	cmp	r0, #0
 8001f4a:	d03f      	beq.n	8001fcc <_vfiprintf_r+0x22c>
 8001f4c:	4b29      	ldr	r3, [pc, #164]	; (8001ff4 <_vfiprintf_r+0x254>)
 8001f4e:	bb1b      	cbnz	r3, 8001f98 <_vfiprintf_r+0x1f8>
 8001f50:	9b03      	ldr	r3, [sp, #12]
 8001f52:	3307      	adds	r3, #7
 8001f54:	f023 0307 	bic.w	r3, r3, #7
 8001f58:	3308      	adds	r3, #8
 8001f5a:	9303      	str	r3, [sp, #12]
 8001f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f5e:	443b      	add	r3, r7
 8001f60:	9309      	str	r3, [sp, #36]	; 0x24
 8001f62:	e767      	b.n	8001e34 <_vfiprintf_r+0x94>
 8001f64:	fb0c 3202 	mla	r2, ip, r2, r3
 8001f68:	460c      	mov	r4, r1
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	e7a5      	b.n	8001eba <_vfiprintf_r+0x11a>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	3401      	adds	r4, #1
 8001f72:	9305      	str	r3, [sp, #20]
 8001f74:	4619      	mov	r1, r3
 8001f76:	f04f 0c0a 	mov.w	ip, #10
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f80:	3a30      	subs	r2, #48	; 0x30
 8001f82:	2a09      	cmp	r2, #9
 8001f84:	d903      	bls.n	8001f8e <_vfiprintf_r+0x1ee>
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0c5      	beq.n	8001f16 <_vfiprintf_r+0x176>
 8001f8a:	9105      	str	r1, [sp, #20]
 8001f8c:	e7c3      	b.n	8001f16 <_vfiprintf_r+0x176>
 8001f8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001f92:	4604      	mov	r4, r0
 8001f94:	2301      	movs	r3, #1
 8001f96:	e7f0      	b.n	8001f7a <_vfiprintf_r+0x1da>
 8001f98:	ab03      	add	r3, sp, #12
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	462a      	mov	r2, r5
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <_vfiprintf_r+0x258>)
 8001fa0:	a904      	add	r1, sp, #16
 8001fa2:	4630      	mov	r0, r6
 8001fa4:	f3af 8000 	nop.w
 8001fa8:	4607      	mov	r7, r0
 8001faa:	1c78      	adds	r0, r7, #1
 8001fac:	d1d6      	bne.n	8001f5c <_vfiprintf_r+0x1bc>
 8001fae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001fb0:	07d9      	lsls	r1, r3, #31
 8001fb2:	d405      	bmi.n	8001fc0 <_vfiprintf_r+0x220>
 8001fb4:	89ab      	ldrh	r3, [r5, #12]
 8001fb6:	059a      	lsls	r2, r3, #22
 8001fb8:	d402      	bmi.n	8001fc0 <_vfiprintf_r+0x220>
 8001fba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001fbc:	f7ff fe31 	bl	8001c22 <__retarget_lock_release_recursive>
 8001fc0:	89ab      	ldrh	r3, [r5, #12]
 8001fc2:	065b      	lsls	r3, r3, #25
 8001fc4:	f53f af12 	bmi.w	8001dec <_vfiprintf_r+0x4c>
 8001fc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001fca:	e711      	b.n	8001df0 <_vfiprintf_r+0x50>
 8001fcc:	ab03      	add	r3, sp, #12
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	462a      	mov	r2, r5
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <_vfiprintf_r+0x258>)
 8001fd4:	a904      	add	r1, sp, #16
 8001fd6:	4630      	mov	r0, r6
 8001fd8:	f000 f880 	bl	80020dc <_printf_i>
 8001fdc:	e7e4      	b.n	8001fa8 <_vfiprintf_r+0x208>
 8001fde:	bf00      	nop
 8001fe0:	08002978 	.word	0x08002978
 8001fe4:	08002998 	.word	0x08002998
 8001fe8:	08002958 	.word	0x08002958
 8001fec:	080029b8 	.word	0x080029b8
 8001ff0:	080029c2 	.word	0x080029c2
 8001ff4:	00000000 	.word	0x00000000
 8001ff8:	08001d7b 	.word	0x08001d7b
 8001ffc:	080029be 	.word	0x080029be

08002000 <_printf_common>:
 8002000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002004:	4616      	mov	r6, r2
 8002006:	4699      	mov	r9, r3
 8002008:	688a      	ldr	r2, [r1, #8]
 800200a:	690b      	ldr	r3, [r1, #16]
 800200c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002010:	4293      	cmp	r3, r2
 8002012:	bfb8      	it	lt
 8002014:	4613      	movlt	r3, r2
 8002016:	6033      	str	r3, [r6, #0]
 8002018:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800201c:	4607      	mov	r7, r0
 800201e:	460c      	mov	r4, r1
 8002020:	b10a      	cbz	r2, 8002026 <_printf_common+0x26>
 8002022:	3301      	adds	r3, #1
 8002024:	6033      	str	r3, [r6, #0]
 8002026:	6823      	ldr	r3, [r4, #0]
 8002028:	0699      	lsls	r1, r3, #26
 800202a:	bf42      	ittt	mi
 800202c:	6833      	ldrmi	r3, [r6, #0]
 800202e:	3302      	addmi	r3, #2
 8002030:	6033      	strmi	r3, [r6, #0]
 8002032:	6825      	ldr	r5, [r4, #0]
 8002034:	f015 0506 	ands.w	r5, r5, #6
 8002038:	d106      	bne.n	8002048 <_printf_common+0x48>
 800203a:	f104 0a19 	add.w	sl, r4, #25
 800203e:	68e3      	ldr	r3, [r4, #12]
 8002040:	6832      	ldr	r2, [r6, #0]
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	42ab      	cmp	r3, r5
 8002046:	dc26      	bgt.n	8002096 <_printf_common+0x96>
 8002048:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800204c:	1e13      	subs	r3, r2, #0
 800204e:	6822      	ldr	r2, [r4, #0]
 8002050:	bf18      	it	ne
 8002052:	2301      	movne	r3, #1
 8002054:	0692      	lsls	r2, r2, #26
 8002056:	d42b      	bmi.n	80020b0 <_printf_common+0xb0>
 8002058:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800205c:	4649      	mov	r1, r9
 800205e:	4638      	mov	r0, r7
 8002060:	47c0      	blx	r8
 8002062:	3001      	adds	r0, #1
 8002064:	d01e      	beq.n	80020a4 <_printf_common+0xa4>
 8002066:	6823      	ldr	r3, [r4, #0]
 8002068:	68e5      	ldr	r5, [r4, #12]
 800206a:	6832      	ldr	r2, [r6, #0]
 800206c:	f003 0306 	and.w	r3, r3, #6
 8002070:	2b04      	cmp	r3, #4
 8002072:	bf08      	it	eq
 8002074:	1aad      	subeq	r5, r5, r2
 8002076:	68a3      	ldr	r3, [r4, #8]
 8002078:	6922      	ldr	r2, [r4, #16]
 800207a:	bf0c      	ite	eq
 800207c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002080:	2500      	movne	r5, #0
 8002082:	4293      	cmp	r3, r2
 8002084:	bfc4      	itt	gt
 8002086:	1a9b      	subgt	r3, r3, r2
 8002088:	18ed      	addgt	r5, r5, r3
 800208a:	2600      	movs	r6, #0
 800208c:	341a      	adds	r4, #26
 800208e:	42b5      	cmp	r5, r6
 8002090:	d11a      	bne.n	80020c8 <_printf_common+0xc8>
 8002092:	2000      	movs	r0, #0
 8002094:	e008      	b.n	80020a8 <_printf_common+0xa8>
 8002096:	2301      	movs	r3, #1
 8002098:	4652      	mov	r2, sl
 800209a:	4649      	mov	r1, r9
 800209c:	4638      	mov	r0, r7
 800209e:	47c0      	blx	r8
 80020a0:	3001      	adds	r0, #1
 80020a2:	d103      	bne.n	80020ac <_printf_common+0xac>
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020ac:	3501      	adds	r5, #1
 80020ae:	e7c6      	b.n	800203e <_printf_common+0x3e>
 80020b0:	18e1      	adds	r1, r4, r3
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	2030      	movs	r0, #48	; 0x30
 80020b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80020ba:	4422      	add	r2, r4
 80020bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80020c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80020c4:	3302      	adds	r3, #2
 80020c6:	e7c7      	b.n	8002058 <_printf_common+0x58>
 80020c8:	2301      	movs	r3, #1
 80020ca:	4622      	mov	r2, r4
 80020cc:	4649      	mov	r1, r9
 80020ce:	4638      	mov	r0, r7
 80020d0:	47c0      	blx	r8
 80020d2:	3001      	adds	r0, #1
 80020d4:	d0e6      	beq.n	80020a4 <_printf_common+0xa4>
 80020d6:	3601      	adds	r6, #1
 80020d8:	e7d9      	b.n	800208e <_printf_common+0x8e>
	...

080020dc <_printf_i>:
 80020dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80020e0:	7e0f      	ldrb	r7, [r1, #24]
 80020e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80020e4:	2f78      	cmp	r7, #120	; 0x78
 80020e6:	4691      	mov	r9, r2
 80020e8:	4680      	mov	r8, r0
 80020ea:	460c      	mov	r4, r1
 80020ec:	469a      	mov	sl, r3
 80020ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80020f2:	d807      	bhi.n	8002104 <_printf_i+0x28>
 80020f4:	2f62      	cmp	r7, #98	; 0x62
 80020f6:	d80a      	bhi.n	800210e <_printf_i+0x32>
 80020f8:	2f00      	cmp	r7, #0
 80020fa:	f000 80d8 	beq.w	80022ae <_printf_i+0x1d2>
 80020fe:	2f58      	cmp	r7, #88	; 0x58
 8002100:	f000 80a3 	beq.w	800224a <_printf_i+0x16e>
 8002104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002108:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800210c:	e03a      	b.n	8002184 <_printf_i+0xa8>
 800210e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002112:	2b15      	cmp	r3, #21
 8002114:	d8f6      	bhi.n	8002104 <_printf_i+0x28>
 8002116:	a101      	add	r1, pc, #4	; (adr r1, 800211c <_printf_i+0x40>)
 8002118:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800211c:	08002175 	.word	0x08002175
 8002120:	08002189 	.word	0x08002189
 8002124:	08002105 	.word	0x08002105
 8002128:	08002105 	.word	0x08002105
 800212c:	08002105 	.word	0x08002105
 8002130:	08002105 	.word	0x08002105
 8002134:	08002189 	.word	0x08002189
 8002138:	08002105 	.word	0x08002105
 800213c:	08002105 	.word	0x08002105
 8002140:	08002105 	.word	0x08002105
 8002144:	08002105 	.word	0x08002105
 8002148:	08002295 	.word	0x08002295
 800214c:	080021b9 	.word	0x080021b9
 8002150:	08002277 	.word	0x08002277
 8002154:	08002105 	.word	0x08002105
 8002158:	08002105 	.word	0x08002105
 800215c:	080022b7 	.word	0x080022b7
 8002160:	08002105 	.word	0x08002105
 8002164:	080021b9 	.word	0x080021b9
 8002168:	08002105 	.word	0x08002105
 800216c:	08002105 	.word	0x08002105
 8002170:	0800227f 	.word	0x0800227f
 8002174:	682b      	ldr	r3, [r5, #0]
 8002176:	1d1a      	adds	r2, r3, #4
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	602a      	str	r2, [r5, #0]
 800217c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002184:	2301      	movs	r3, #1
 8002186:	e0a3      	b.n	80022d0 <_printf_i+0x1f4>
 8002188:	6820      	ldr	r0, [r4, #0]
 800218a:	6829      	ldr	r1, [r5, #0]
 800218c:	0606      	lsls	r6, r0, #24
 800218e:	f101 0304 	add.w	r3, r1, #4
 8002192:	d50a      	bpl.n	80021aa <_printf_i+0xce>
 8002194:	680e      	ldr	r6, [r1, #0]
 8002196:	602b      	str	r3, [r5, #0]
 8002198:	2e00      	cmp	r6, #0
 800219a:	da03      	bge.n	80021a4 <_printf_i+0xc8>
 800219c:	232d      	movs	r3, #45	; 0x2d
 800219e:	4276      	negs	r6, r6
 80021a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021a4:	485e      	ldr	r0, [pc, #376]	; (8002320 <_printf_i+0x244>)
 80021a6:	230a      	movs	r3, #10
 80021a8:	e019      	b.n	80021de <_printf_i+0x102>
 80021aa:	680e      	ldr	r6, [r1, #0]
 80021ac:	602b      	str	r3, [r5, #0]
 80021ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80021b2:	bf18      	it	ne
 80021b4:	b236      	sxthne	r6, r6
 80021b6:	e7ef      	b.n	8002198 <_printf_i+0xbc>
 80021b8:	682b      	ldr	r3, [r5, #0]
 80021ba:	6820      	ldr	r0, [r4, #0]
 80021bc:	1d19      	adds	r1, r3, #4
 80021be:	6029      	str	r1, [r5, #0]
 80021c0:	0601      	lsls	r1, r0, #24
 80021c2:	d501      	bpl.n	80021c8 <_printf_i+0xec>
 80021c4:	681e      	ldr	r6, [r3, #0]
 80021c6:	e002      	b.n	80021ce <_printf_i+0xf2>
 80021c8:	0646      	lsls	r6, r0, #25
 80021ca:	d5fb      	bpl.n	80021c4 <_printf_i+0xe8>
 80021cc:	881e      	ldrh	r6, [r3, #0]
 80021ce:	4854      	ldr	r0, [pc, #336]	; (8002320 <_printf_i+0x244>)
 80021d0:	2f6f      	cmp	r7, #111	; 0x6f
 80021d2:	bf0c      	ite	eq
 80021d4:	2308      	moveq	r3, #8
 80021d6:	230a      	movne	r3, #10
 80021d8:	2100      	movs	r1, #0
 80021da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80021de:	6865      	ldr	r5, [r4, #4]
 80021e0:	60a5      	str	r5, [r4, #8]
 80021e2:	2d00      	cmp	r5, #0
 80021e4:	bfa2      	ittt	ge
 80021e6:	6821      	ldrge	r1, [r4, #0]
 80021e8:	f021 0104 	bicge.w	r1, r1, #4
 80021ec:	6021      	strge	r1, [r4, #0]
 80021ee:	b90e      	cbnz	r6, 80021f4 <_printf_i+0x118>
 80021f0:	2d00      	cmp	r5, #0
 80021f2:	d04d      	beq.n	8002290 <_printf_i+0x1b4>
 80021f4:	4615      	mov	r5, r2
 80021f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80021fa:	fb03 6711 	mls	r7, r3, r1, r6
 80021fe:	5dc7      	ldrb	r7, [r0, r7]
 8002200:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002204:	4637      	mov	r7, r6
 8002206:	42bb      	cmp	r3, r7
 8002208:	460e      	mov	r6, r1
 800220a:	d9f4      	bls.n	80021f6 <_printf_i+0x11a>
 800220c:	2b08      	cmp	r3, #8
 800220e:	d10b      	bne.n	8002228 <_printf_i+0x14c>
 8002210:	6823      	ldr	r3, [r4, #0]
 8002212:	07de      	lsls	r6, r3, #31
 8002214:	d508      	bpl.n	8002228 <_printf_i+0x14c>
 8002216:	6923      	ldr	r3, [r4, #16]
 8002218:	6861      	ldr	r1, [r4, #4]
 800221a:	4299      	cmp	r1, r3
 800221c:	bfde      	ittt	le
 800221e:	2330      	movle	r3, #48	; 0x30
 8002220:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002224:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002228:	1b52      	subs	r2, r2, r5
 800222a:	6122      	str	r2, [r4, #16]
 800222c:	f8cd a000 	str.w	sl, [sp]
 8002230:	464b      	mov	r3, r9
 8002232:	aa03      	add	r2, sp, #12
 8002234:	4621      	mov	r1, r4
 8002236:	4640      	mov	r0, r8
 8002238:	f7ff fee2 	bl	8002000 <_printf_common>
 800223c:	3001      	adds	r0, #1
 800223e:	d14c      	bne.n	80022da <_printf_i+0x1fe>
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	b004      	add	sp, #16
 8002246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800224a:	4835      	ldr	r0, [pc, #212]	; (8002320 <_printf_i+0x244>)
 800224c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002250:	6829      	ldr	r1, [r5, #0]
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	f851 6b04 	ldr.w	r6, [r1], #4
 8002258:	6029      	str	r1, [r5, #0]
 800225a:	061d      	lsls	r5, r3, #24
 800225c:	d514      	bpl.n	8002288 <_printf_i+0x1ac>
 800225e:	07df      	lsls	r7, r3, #31
 8002260:	bf44      	itt	mi
 8002262:	f043 0320 	orrmi.w	r3, r3, #32
 8002266:	6023      	strmi	r3, [r4, #0]
 8002268:	b91e      	cbnz	r6, 8002272 <_printf_i+0x196>
 800226a:	6823      	ldr	r3, [r4, #0]
 800226c:	f023 0320 	bic.w	r3, r3, #32
 8002270:	6023      	str	r3, [r4, #0]
 8002272:	2310      	movs	r3, #16
 8002274:	e7b0      	b.n	80021d8 <_printf_i+0xfc>
 8002276:	6823      	ldr	r3, [r4, #0]
 8002278:	f043 0320 	orr.w	r3, r3, #32
 800227c:	6023      	str	r3, [r4, #0]
 800227e:	2378      	movs	r3, #120	; 0x78
 8002280:	4828      	ldr	r0, [pc, #160]	; (8002324 <_printf_i+0x248>)
 8002282:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002286:	e7e3      	b.n	8002250 <_printf_i+0x174>
 8002288:	0659      	lsls	r1, r3, #25
 800228a:	bf48      	it	mi
 800228c:	b2b6      	uxthmi	r6, r6
 800228e:	e7e6      	b.n	800225e <_printf_i+0x182>
 8002290:	4615      	mov	r5, r2
 8002292:	e7bb      	b.n	800220c <_printf_i+0x130>
 8002294:	682b      	ldr	r3, [r5, #0]
 8002296:	6826      	ldr	r6, [r4, #0]
 8002298:	6961      	ldr	r1, [r4, #20]
 800229a:	1d18      	adds	r0, r3, #4
 800229c:	6028      	str	r0, [r5, #0]
 800229e:	0635      	lsls	r5, r6, #24
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	d501      	bpl.n	80022a8 <_printf_i+0x1cc>
 80022a4:	6019      	str	r1, [r3, #0]
 80022a6:	e002      	b.n	80022ae <_printf_i+0x1d2>
 80022a8:	0670      	lsls	r0, r6, #25
 80022aa:	d5fb      	bpl.n	80022a4 <_printf_i+0x1c8>
 80022ac:	8019      	strh	r1, [r3, #0]
 80022ae:	2300      	movs	r3, #0
 80022b0:	6123      	str	r3, [r4, #16]
 80022b2:	4615      	mov	r5, r2
 80022b4:	e7ba      	b.n	800222c <_printf_i+0x150>
 80022b6:	682b      	ldr	r3, [r5, #0]
 80022b8:	1d1a      	adds	r2, r3, #4
 80022ba:	602a      	str	r2, [r5, #0]
 80022bc:	681d      	ldr	r5, [r3, #0]
 80022be:	6862      	ldr	r2, [r4, #4]
 80022c0:	2100      	movs	r1, #0
 80022c2:	4628      	mov	r0, r5
 80022c4:	f7fd ffa4 	bl	8000210 <memchr>
 80022c8:	b108      	cbz	r0, 80022ce <_printf_i+0x1f2>
 80022ca:	1b40      	subs	r0, r0, r5
 80022cc:	6060      	str	r0, [r4, #4]
 80022ce:	6863      	ldr	r3, [r4, #4]
 80022d0:	6123      	str	r3, [r4, #16]
 80022d2:	2300      	movs	r3, #0
 80022d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022d8:	e7a8      	b.n	800222c <_printf_i+0x150>
 80022da:	6923      	ldr	r3, [r4, #16]
 80022dc:	462a      	mov	r2, r5
 80022de:	4649      	mov	r1, r9
 80022e0:	4640      	mov	r0, r8
 80022e2:	47d0      	blx	sl
 80022e4:	3001      	adds	r0, #1
 80022e6:	d0ab      	beq.n	8002240 <_printf_i+0x164>
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	079b      	lsls	r3, r3, #30
 80022ec:	d413      	bmi.n	8002316 <_printf_i+0x23a>
 80022ee:	68e0      	ldr	r0, [r4, #12]
 80022f0:	9b03      	ldr	r3, [sp, #12]
 80022f2:	4298      	cmp	r0, r3
 80022f4:	bfb8      	it	lt
 80022f6:	4618      	movlt	r0, r3
 80022f8:	e7a4      	b.n	8002244 <_printf_i+0x168>
 80022fa:	2301      	movs	r3, #1
 80022fc:	4632      	mov	r2, r6
 80022fe:	4649      	mov	r1, r9
 8002300:	4640      	mov	r0, r8
 8002302:	47d0      	blx	sl
 8002304:	3001      	adds	r0, #1
 8002306:	d09b      	beq.n	8002240 <_printf_i+0x164>
 8002308:	3501      	adds	r5, #1
 800230a:	68e3      	ldr	r3, [r4, #12]
 800230c:	9903      	ldr	r1, [sp, #12]
 800230e:	1a5b      	subs	r3, r3, r1
 8002310:	42ab      	cmp	r3, r5
 8002312:	dcf2      	bgt.n	80022fa <_printf_i+0x21e>
 8002314:	e7eb      	b.n	80022ee <_printf_i+0x212>
 8002316:	2500      	movs	r5, #0
 8002318:	f104 0619 	add.w	r6, r4, #25
 800231c:	e7f5      	b.n	800230a <_printf_i+0x22e>
 800231e:	bf00      	nop
 8002320:	080029c9 	.word	0x080029c9
 8002324:	080029da 	.word	0x080029da

08002328 <_sbrk_r>:
 8002328:	b538      	push	{r3, r4, r5, lr}
 800232a:	4d06      	ldr	r5, [pc, #24]	; (8002344 <_sbrk_r+0x1c>)
 800232c:	2300      	movs	r3, #0
 800232e:	4604      	mov	r4, r0
 8002330:	4608      	mov	r0, r1
 8002332:	602b      	str	r3, [r5, #0]
 8002334:	f7fe fb04 	bl	8000940 <_sbrk>
 8002338:	1c43      	adds	r3, r0, #1
 800233a:	d102      	bne.n	8002342 <_sbrk_r+0x1a>
 800233c:	682b      	ldr	r3, [r5, #0]
 800233e:	b103      	cbz	r3, 8002342 <_sbrk_r+0x1a>
 8002340:	6023      	str	r3, [r4, #0]
 8002342:	bd38      	pop	{r3, r4, r5, pc}
 8002344:	200000a0 	.word	0x200000a0

08002348 <__sread>:
 8002348:	b510      	push	{r4, lr}
 800234a:	460c      	mov	r4, r1
 800234c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002350:	f000 fab2 	bl	80028b8 <_read_r>
 8002354:	2800      	cmp	r0, #0
 8002356:	bfab      	itete	ge
 8002358:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800235a:	89a3      	ldrhlt	r3, [r4, #12]
 800235c:	181b      	addge	r3, r3, r0
 800235e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002362:	bfac      	ite	ge
 8002364:	6563      	strge	r3, [r4, #84]	; 0x54
 8002366:	81a3      	strhlt	r3, [r4, #12]
 8002368:	bd10      	pop	{r4, pc}

0800236a <__swrite>:
 800236a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800236e:	461f      	mov	r7, r3
 8002370:	898b      	ldrh	r3, [r1, #12]
 8002372:	05db      	lsls	r3, r3, #23
 8002374:	4605      	mov	r5, r0
 8002376:	460c      	mov	r4, r1
 8002378:	4616      	mov	r6, r2
 800237a:	d505      	bpl.n	8002388 <__swrite+0x1e>
 800237c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002380:	2302      	movs	r3, #2
 8002382:	2200      	movs	r2, #0
 8002384:	f000 f9c8 	bl	8002718 <_lseek_r>
 8002388:	89a3      	ldrh	r3, [r4, #12]
 800238a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800238e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002392:	81a3      	strh	r3, [r4, #12]
 8002394:	4632      	mov	r2, r6
 8002396:	463b      	mov	r3, r7
 8002398:	4628      	mov	r0, r5
 800239a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800239e:	f000 b869 	b.w	8002474 <_write_r>

080023a2 <__sseek>:
 80023a2:	b510      	push	{r4, lr}
 80023a4:	460c      	mov	r4, r1
 80023a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023aa:	f000 f9b5 	bl	8002718 <_lseek_r>
 80023ae:	1c43      	adds	r3, r0, #1
 80023b0:	89a3      	ldrh	r3, [r4, #12]
 80023b2:	bf15      	itete	ne
 80023b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80023b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80023ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80023be:	81a3      	strheq	r3, [r4, #12]
 80023c0:	bf18      	it	ne
 80023c2:	81a3      	strhne	r3, [r4, #12]
 80023c4:	bd10      	pop	{r4, pc}

080023c6 <__sclose>:
 80023c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023ca:	f000 b8d3 	b.w	8002574 <_close_r>
	...

080023d0 <__swbuf_r>:
 80023d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d2:	460e      	mov	r6, r1
 80023d4:	4614      	mov	r4, r2
 80023d6:	4605      	mov	r5, r0
 80023d8:	b118      	cbz	r0, 80023e2 <__swbuf_r+0x12>
 80023da:	6983      	ldr	r3, [r0, #24]
 80023dc:	b90b      	cbnz	r3, 80023e2 <__swbuf_r+0x12>
 80023de:	f7ff fb81 	bl	8001ae4 <__sinit>
 80023e2:	4b21      	ldr	r3, [pc, #132]	; (8002468 <__swbuf_r+0x98>)
 80023e4:	429c      	cmp	r4, r3
 80023e6:	d12b      	bne.n	8002440 <__swbuf_r+0x70>
 80023e8:	686c      	ldr	r4, [r5, #4]
 80023ea:	69a3      	ldr	r3, [r4, #24]
 80023ec:	60a3      	str	r3, [r4, #8]
 80023ee:	89a3      	ldrh	r3, [r4, #12]
 80023f0:	071a      	lsls	r2, r3, #28
 80023f2:	d52f      	bpl.n	8002454 <__swbuf_r+0x84>
 80023f4:	6923      	ldr	r3, [r4, #16]
 80023f6:	b36b      	cbz	r3, 8002454 <__swbuf_r+0x84>
 80023f8:	6923      	ldr	r3, [r4, #16]
 80023fa:	6820      	ldr	r0, [r4, #0]
 80023fc:	1ac0      	subs	r0, r0, r3
 80023fe:	6963      	ldr	r3, [r4, #20]
 8002400:	b2f6      	uxtb	r6, r6
 8002402:	4283      	cmp	r3, r0
 8002404:	4637      	mov	r7, r6
 8002406:	dc04      	bgt.n	8002412 <__swbuf_r+0x42>
 8002408:	4621      	mov	r1, r4
 800240a:	4628      	mov	r0, r5
 800240c:	f000 f948 	bl	80026a0 <_fflush_r>
 8002410:	bb30      	cbnz	r0, 8002460 <__swbuf_r+0x90>
 8002412:	68a3      	ldr	r3, [r4, #8]
 8002414:	3b01      	subs	r3, #1
 8002416:	60a3      	str	r3, [r4, #8]
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	6022      	str	r2, [r4, #0]
 800241e:	701e      	strb	r6, [r3, #0]
 8002420:	6963      	ldr	r3, [r4, #20]
 8002422:	3001      	adds	r0, #1
 8002424:	4283      	cmp	r3, r0
 8002426:	d004      	beq.n	8002432 <__swbuf_r+0x62>
 8002428:	89a3      	ldrh	r3, [r4, #12]
 800242a:	07db      	lsls	r3, r3, #31
 800242c:	d506      	bpl.n	800243c <__swbuf_r+0x6c>
 800242e:	2e0a      	cmp	r6, #10
 8002430:	d104      	bne.n	800243c <__swbuf_r+0x6c>
 8002432:	4621      	mov	r1, r4
 8002434:	4628      	mov	r0, r5
 8002436:	f000 f933 	bl	80026a0 <_fflush_r>
 800243a:	b988      	cbnz	r0, 8002460 <__swbuf_r+0x90>
 800243c:	4638      	mov	r0, r7
 800243e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <__swbuf_r+0x9c>)
 8002442:	429c      	cmp	r4, r3
 8002444:	d101      	bne.n	800244a <__swbuf_r+0x7a>
 8002446:	68ac      	ldr	r4, [r5, #8]
 8002448:	e7cf      	b.n	80023ea <__swbuf_r+0x1a>
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <__swbuf_r+0xa0>)
 800244c:	429c      	cmp	r4, r3
 800244e:	bf08      	it	eq
 8002450:	68ec      	ldreq	r4, [r5, #12]
 8002452:	e7ca      	b.n	80023ea <__swbuf_r+0x1a>
 8002454:	4621      	mov	r1, r4
 8002456:	4628      	mov	r0, r5
 8002458:	f000 f81e 	bl	8002498 <__swsetup_r>
 800245c:	2800      	cmp	r0, #0
 800245e:	d0cb      	beq.n	80023f8 <__swbuf_r+0x28>
 8002460:	f04f 37ff 	mov.w	r7, #4294967295
 8002464:	e7ea      	b.n	800243c <__swbuf_r+0x6c>
 8002466:	bf00      	nop
 8002468:	08002978 	.word	0x08002978
 800246c:	08002998 	.word	0x08002998
 8002470:	08002958 	.word	0x08002958

08002474 <_write_r>:
 8002474:	b538      	push	{r3, r4, r5, lr}
 8002476:	4d07      	ldr	r5, [pc, #28]	; (8002494 <_write_r+0x20>)
 8002478:	4604      	mov	r4, r0
 800247a:	4608      	mov	r0, r1
 800247c:	4611      	mov	r1, r2
 800247e:	2200      	movs	r2, #0
 8002480:	602a      	str	r2, [r5, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	f7fe f99a 	bl	80007bc <_write>
 8002488:	1c43      	adds	r3, r0, #1
 800248a:	d102      	bne.n	8002492 <_write_r+0x1e>
 800248c:	682b      	ldr	r3, [r5, #0]
 800248e:	b103      	cbz	r3, 8002492 <_write_r+0x1e>
 8002490:	6023      	str	r3, [r4, #0]
 8002492:	bd38      	pop	{r3, r4, r5, pc}
 8002494:	200000a0 	.word	0x200000a0

08002498 <__swsetup_r>:
 8002498:	4b32      	ldr	r3, [pc, #200]	; (8002564 <__swsetup_r+0xcc>)
 800249a:	b570      	push	{r4, r5, r6, lr}
 800249c:	681d      	ldr	r5, [r3, #0]
 800249e:	4606      	mov	r6, r0
 80024a0:	460c      	mov	r4, r1
 80024a2:	b125      	cbz	r5, 80024ae <__swsetup_r+0x16>
 80024a4:	69ab      	ldr	r3, [r5, #24]
 80024a6:	b913      	cbnz	r3, 80024ae <__swsetup_r+0x16>
 80024a8:	4628      	mov	r0, r5
 80024aa:	f7ff fb1b 	bl	8001ae4 <__sinit>
 80024ae:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <__swsetup_r+0xd0>)
 80024b0:	429c      	cmp	r4, r3
 80024b2:	d10f      	bne.n	80024d4 <__swsetup_r+0x3c>
 80024b4:	686c      	ldr	r4, [r5, #4]
 80024b6:	89a3      	ldrh	r3, [r4, #12]
 80024b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80024bc:	0719      	lsls	r1, r3, #28
 80024be:	d42c      	bmi.n	800251a <__swsetup_r+0x82>
 80024c0:	06dd      	lsls	r5, r3, #27
 80024c2:	d411      	bmi.n	80024e8 <__swsetup_r+0x50>
 80024c4:	2309      	movs	r3, #9
 80024c6:	6033      	str	r3, [r6, #0]
 80024c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80024cc:	81a3      	strh	r3, [r4, #12]
 80024ce:	f04f 30ff 	mov.w	r0, #4294967295
 80024d2:	e03e      	b.n	8002552 <__swsetup_r+0xba>
 80024d4:	4b25      	ldr	r3, [pc, #148]	; (800256c <__swsetup_r+0xd4>)
 80024d6:	429c      	cmp	r4, r3
 80024d8:	d101      	bne.n	80024de <__swsetup_r+0x46>
 80024da:	68ac      	ldr	r4, [r5, #8]
 80024dc:	e7eb      	b.n	80024b6 <__swsetup_r+0x1e>
 80024de:	4b24      	ldr	r3, [pc, #144]	; (8002570 <__swsetup_r+0xd8>)
 80024e0:	429c      	cmp	r4, r3
 80024e2:	bf08      	it	eq
 80024e4:	68ec      	ldreq	r4, [r5, #12]
 80024e6:	e7e6      	b.n	80024b6 <__swsetup_r+0x1e>
 80024e8:	0758      	lsls	r0, r3, #29
 80024ea:	d512      	bpl.n	8002512 <__swsetup_r+0x7a>
 80024ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024ee:	b141      	cbz	r1, 8002502 <__swsetup_r+0x6a>
 80024f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80024f4:	4299      	cmp	r1, r3
 80024f6:	d002      	beq.n	80024fe <__swsetup_r+0x66>
 80024f8:	4630      	mov	r0, r6
 80024fa:	f000 f991 	bl	8002820 <_free_r>
 80024fe:	2300      	movs	r3, #0
 8002500:	6363      	str	r3, [r4, #52]	; 0x34
 8002502:	89a3      	ldrh	r3, [r4, #12]
 8002504:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002508:	81a3      	strh	r3, [r4, #12]
 800250a:	2300      	movs	r3, #0
 800250c:	6063      	str	r3, [r4, #4]
 800250e:	6923      	ldr	r3, [r4, #16]
 8002510:	6023      	str	r3, [r4, #0]
 8002512:	89a3      	ldrh	r3, [r4, #12]
 8002514:	f043 0308 	orr.w	r3, r3, #8
 8002518:	81a3      	strh	r3, [r4, #12]
 800251a:	6923      	ldr	r3, [r4, #16]
 800251c:	b94b      	cbnz	r3, 8002532 <__swsetup_r+0x9a>
 800251e:	89a3      	ldrh	r3, [r4, #12]
 8002520:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002528:	d003      	beq.n	8002532 <__swsetup_r+0x9a>
 800252a:	4621      	mov	r1, r4
 800252c:	4630      	mov	r0, r6
 800252e:	f000 f92b 	bl	8002788 <__smakebuf_r>
 8002532:	89a0      	ldrh	r0, [r4, #12]
 8002534:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002538:	f010 0301 	ands.w	r3, r0, #1
 800253c:	d00a      	beq.n	8002554 <__swsetup_r+0xbc>
 800253e:	2300      	movs	r3, #0
 8002540:	60a3      	str	r3, [r4, #8]
 8002542:	6963      	ldr	r3, [r4, #20]
 8002544:	425b      	negs	r3, r3
 8002546:	61a3      	str	r3, [r4, #24]
 8002548:	6923      	ldr	r3, [r4, #16]
 800254a:	b943      	cbnz	r3, 800255e <__swsetup_r+0xc6>
 800254c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002550:	d1ba      	bne.n	80024c8 <__swsetup_r+0x30>
 8002552:	bd70      	pop	{r4, r5, r6, pc}
 8002554:	0781      	lsls	r1, r0, #30
 8002556:	bf58      	it	pl
 8002558:	6963      	ldrpl	r3, [r4, #20]
 800255a:	60a3      	str	r3, [r4, #8]
 800255c:	e7f4      	b.n	8002548 <__swsetup_r+0xb0>
 800255e:	2000      	movs	r0, #0
 8002560:	e7f7      	b.n	8002552 <__swsetup_r+0xba>
 8002562:	bf00      	nop
 8002564:	2000000c 	.word	0x2000000c
 8002568:	08002978 	.word	0x08002978
 800256c:	08002998 	.word	0x08002998
 8002570:	08002958 	.word	0x08002958

08002574 <_close_r>:
 8002574:	b538      	push	{r3, r4, r5, lr}
 8002576:	4d06      	ldr	r5, [pc, #24]	; (8002590 <_close_r+0x1c>)
 8002578:	2300      	movs	r3, #0
 800257a:	4604      	mov	r4, r0
 800257c:	4608      	mov	r0, r1
 800257e:	602b      	str	r3, [r5, #0]
 8002580:	f7fe f9a9 	bl	80008d6 <_close>
 8002584:	1c43      	adds	r3, r0, #1
 8002586:	d102      	bne.n	800258e <_close_r+0x1a>
 8002588:	682b      	ldr	r3, [r5, #0]
 800258a:	b103      	cbz	r3, 800258e <_close_r+0x1a>
 800258c:	6023      	str	r3, [r4, #0]
 800258e:	bd38      	pop	{r3, r4, r5, pc}
 8002590:	200000a0 	.word	0x200000a0

08002594 <__sflush_r>:
 8002594:	898a      	ldrh	r2, [r1, #12]
 8002596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800259a:	4605      	mov	r5, r0
 800259c:	0710      	lsls	r0, r2, #28
 800259e:	460c      	mov	r4, r1
 80025a0:	d458      	bmi.n	8002654 <__sflush_r+0xc0>
 80025a2:	684b      	ldr	r3, [r1, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	dc05      	bgt.n	80025b4 <__sflush_r+0x20>
 80025a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	dc02      	bgt.n	80025b4 <__sflush_r+0x20>
 80025ae:	2000      	movs	r0, #0
 80025b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025b6:	2e00      	cmp	r6, #0
 80025b8:	d0f9      	beq.n	80025ae <__sflush_r+0x1a>
 80025ba:	2300      	movs	r3, #0
 80025bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80025c0:	682f      	ldr	r7, [r5, #0]
 80025c2:	602b      	str	r3, [r5, #0]
 80025c4:	d032      	beq.n	800262c <__sflush_r+0x98>
 80025c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025c8:	89a3      	ldrh	r3, [r4, #12]
 80025ca:	075a      	lsls	r2, r3, #29
 80025cc:	d505      	bpl.n	80025da <__sflush_r+0x46>
 80025ce:	6863      	ldr	r3, [r4, #4]
 80025d0:	1ac0      	subs	r0, r0, r3
 80025d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025d4:	b10b      	cbz	r3, 80025da <__sflush_r+0x46>
 80025d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025d8:	1ac0      	subs	r0, r0, r3
 80025da:	2300      	movs	r3, #0
 80025dc:	4602      	mov	r2, r0
 80025de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025e0:	6a21      	ldr	r1, [r4, #32]
 80025e2:	4628      	mov	r0, r5
 80025e4:	47b0      	blx	r6
 80025e6:	1c43      	adds	r3, r0, #1
 80025e8:	89a3      	ldrh	r3, [r4, #12]
 80025ea:	d106      	bne.n	80025fa <__sflush_r+0x66>
 80025ec:	6829      	ldr	r1, [r5, #0]
 80025ee:	291d      	cmp	r1, #29
 80025f0:	d82c      	bhi.n	800264c <__sflush_r+0xb8>
 80025f2:	4a2a      	ldr	r2, [pc, #168]	; (800269c <__sflush_r+0x108>)
 80025f4:	40ca      	lsrs	r2, r1
 80025f6:	07d6      	lsls	r6, r2, #31
 80025f8:	d528      	bpl.n	800264c <__sflush_r+0xb8>
 80025fa:	2200      	movs	r2, #0
 80025fc:	6062      	str	r2, [r4, #4]
 80025fe:	04d9      	lsls	r1, r3, #19
 8002600:	6922      	ldr	r2, [r4, #16]
 8002602:	6022      	str	r2, [r4, #0]
 8002604:	d504      	bpl.n	8002610 <__sflush_r+0x7c>
 8002606:	1c42      	adds	r2, r0, #1
 8002608:	d101      	bne.n	800260e <__sflush_r+0x7a>
 800260a:	682b      	ldr	r3, [r5, #0]
 800260c:	b903      	cbnz	r3, 8002610 <__sflush_r+0x7c>
 800260e:	6560      	str	r0, [r4, #84]	; 0x54
 8002610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002612:	602f      	str	r7, [r5, #0]
 8002614:	2900      	cmp	r1, #0
 8002616:	d0ca      	beq.n	80025ae <__sflush_r+0x1a>
 8002618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800261c:	4299      	cmp	r1, r3
 800261e:	d002      	beq.n	8002626 <__sflush_r+0x92>
 8002620:	4628      	mov	r0, r5
 8002622:	f000 f8fd 	bl	8002820 <_free_r>
 8002626:	2000      	movs	r0, #0
 8002628:	6360      	str	r0, [r4, #52]	; 0x34
 800262a:	e7c1      	b.n	80025b0 <__sflush_r+0x1c>
 800262c:	6a21      	ldr	r1, [r4, #32]
 800262e:	2301      	movs	r3, #1
 8002630:	4628      	mov	r0, r5
 8002632:	47b0      	blx	r6
 8002634:	1c41      	adds	r1, r0, #1
 8002636:	d1c7      	bne.n	80025c8 <__sflush_r+0x34>
 8002638:	682b      	ldr	r3, [r5, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0c4      	beq.n	80025c8 <__sflush_r+0x34>
 800263e:	2b1d      	cmp	r3, #29
 8002640:	d001      	beq.n	8002646 <__sflush_r+0xb2>
 8002642:	2b16      	cmp	r3, #22
 8002644:	d101      	bne.n	800264a <__sflush_r+0xb6>
 8002646:	602f      	str	r7, [r5, #0]
 8002648:	e7b1      	b.n	80025ae <__sflush_r+0x1a>
 800264a:	89a3      	ldrh	r3, [r4, #12]
 800264c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002650:	81a3      	strh	r3, [r4, #12]
 8002652:	e7ad      	b.n	80025b0 <__sflush_r+0x1c>
 8002654:	690f      	ldr	r7, [r1, #16]
 8002656:	2f00      	cmp	r7, #0
 8002658:	d0a9      	beq.n	80025ae <__sflush_r+0x1a>
 800265a:	0793      	lsls	r3, r2, #30
 800265c:	680e      	ldr	r6, [r1, #0]
 800265e:	bf08      	it	eq
 8002660:	694b      	ldreq	r3, [r1, #20]
 8002662:	600f      	str	r7, [r1, #0]
 8002664:	bf18      	it	ne
 8002666:	2300      	movne	r3, #0
 8002668:	eba6 0807 	sub.w	r8, r6, r7
 800266c:	608b      	str	r3, [r1, #8]
 800266e:	f1b8 0f00 	cmp.w	r8, #0
 8002672:	dd9c      	ble.n	80025ae <__sflush_r+0x1a>
 8002674:	6a21      	ldr	r1, [r4, #32]
 8002676:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002678:	4643      	mov	r3, r8
 800267a:	463a      	mov	r2, r7
 800267c:	4628      	mov	r0, r5
 800267e:	47b0      	blx	r6
 8002680:	2800      	cmp	r0, #0
 8002682:	dc06      	bgt.n	8002692 <__sflush_r+0xfe>
 8002684:	89a3      	ldrh	r3, [r4, #12]
 8002686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800268a:	81a3      	strh	r3, [r4, #12]
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	e78e      	b.n	80025b0 <__sflush_r+0x1c>
 8002692:	4407      	add	r7, r0
 8002694:	eba8 0800 	sub.w	r8, r8, r0
 8002698:	e7e9      	b.n	800266e <__sflush_r+0xda>
 800269a:	bf00      	nop
 800269c:	20400001 	.word	0x20400001

080026a0 <_fflush_r>:
 80026a0:	b538      	push	{r3, r4, r5, lr}
 80026a2:	690b      	ldr	r3, [r1, #16]
 80026a4:	4605      	mov	r5, r0
 80026a6:	460c      	mov	r4, r1
 80026a8:	b913      	cbnz	r3, 80026b0 <_fflush_r+0x10>
 80026aa:	2500      	movs	r5, #0
 80026ac:	4628      	mov	r0, r5
 80026ae:	bd38      	pop	{r3, r4, r5, pc}
 80026b0:	b118      	cbz	r0, 80026ba <_fflush_r+0x1a>
 80026b2:	6983      	ldr	r3, [r0, #24]
 80026b4:	b90b      	cbnz	r3, 80026ba <_fflush_r+0x1a>
 80026b6:	f7ff fa15 	bl	8001ae4 <__sinit>
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <_fflush_r+0x6c>)
 80026bc:	429c      	cmp	r4, r3
 80026be:	d11b      	bne.n	80026f8 <_fflush_r+0x58>
 80026c0:	686c      	ldr	r4, [r5, #4]
 80026c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0ef      	beq.n	80026aa <_fflush_r+0xa>
 80026ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80026cc:	07d0      	lsls	r0, r2, #31
 80026ce:	d404      	bmi.n	80026da <_fflush_r+0x3a>
 80026d0:	0599      	lsls	r1, r3, #22
 80026d2:	d402      	bmi.n	80026da <_fflush_r+0x3a>
 80026d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026d6:	f7ff faa3 	bl	8001c20 <__retarget_lock_acquire_recursive>
 80026da:	4628      	mov	r0, r5
 80026dc:	4621      	mov	r1, r4
 80026de:	f7ff ff59 	bl	8002594 <__sflush_r>
 80026e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026e4:	07da      	lsls	r2, r3, #31
 80026e6:	4605      	mov	r5, r0
 80026e8:	d4e0      	bmi.n	80026ac <_fflush_r+0xc>
 80026ea:	89a3      	ldrh	r3, [r4, #12]
 80026ec:	059b      	lsls	r3, r3, #22
 80026ee:	d4dd      	bmi.n	80026ac <_fflush_r+0xc>
 80026f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026f2:	f7ff fa96 	bl	8001c22 <__retarget_lock_release_recursive>
 80026f6:	e7d9      	b.n	80026ac <_fflush_r+0xc>
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <_fflush_r+0x70>)
 80026fa:	429c      	cmp	r4, r3
 80026fc:	d101      	bne.n	8002702 <_fflush_r+0x62>
 80026fe:	68ac      	ldr	r4, [r5, #8]
 8002700:	e7df      	b.n	80026c2 <_fflush_r+0x22>
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <_fflush_r+0x74>)
 8002704:	429c      	cmp	r4, r3
 8002706:	bf08      	it	eq
 8002708:	68ec      	ldreq	r4, [r5, #12]
 800270a:	e7da      	b.n	80026c2 <_fflush_r+0x22>
 800270c:	08002978 	.word	0x08002978
 8002710:	08002998 	.word	0x08002998
 8002714:	08002958 	.word	0x08002958

08002718 <_lseek_r>:
 8002718:	b538      	push	{r3, r4, r5, lr}
 800271a:	4d07      	ldr	r5, [pc, #28]	; (8002738 <_lseek_r+0x20>)
 800271c:	4604      	mov	r4, r0
 800271e:	4608      	mov	r0, r1
 8002720:	4611      	mov	r1, r2
 8002722:	2200      	movs	r2, #0
 8002724:	602a      	str	r2, [r5, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	f7fe f8fc 	bl	8000924 <_lseek>
 800272c:	1c43      	adds	r3, r0, #1
 800272e:	d102      	bne.n	8002736 <_lseek_r+0x1e>
 8002730:	682b      	ldr	r3, [r5, #0]
 8002732:	b103      	cbz	r3, 8002736 <_lseek_r+0x1e>
 8002734:	6023      	str	r3, [r4, #0]
 8002736:	bd38      	pop	{r3, r4, r5, pc}
 8002738:	200000a0 	.word	0x200000a0

0800273c <__swhatbuf_r>:
 800273c:	b570      	push	{r4, r5, r6, lr}
 800273e:	460e      	mov	r6, r1
 8002740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002744:	2900      	cmp	r1, #0
 8002746:	b096      	sub	sp, #88	; 0x58
 8002748:	4614      	mov	r4, r2
 800274a:	461d      	mov	r5, r3
 800274c:	da08      	bge.n	8002760 <__swhatbuf_r+0x24>
 800274e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	602a      	str	r2, [r5, #0]
 8002756:	061a      	lsls	r2, r3, #24
 8002758:	d410      	bmi.n	800277c <__swhatbuf_r+0x40>
 800275a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800275e:	e00e      	b.n	800277e <__swhatbuf_r+0x42>
 8002760:	466a      	mov	r2, sp
 8002762:	f000 f8bb 	bl	80028dc <_fstat_r>
 8002766:	2800      	cmp	r0, #0
 8002768:	dbf1      	blt.n	800274e <__swhatbuf_r+0x12>
 800276a:	9a01      	ldr	r2, [sp, #4]
 800276c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002770:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002774:	425a      	negs	r2, r3
 8002776:	415a      	adcs	r2, r3
 8002778:	602a      	str	r2, [r5, #0]
 800277a:	e7ee      	b.n	800275a <__swhatbuf_r+0x1e>
 800277c:	2340      	movs	r3, #64	; 0x40
 800277e:	2000      	movs	r0, #0
 8002780:	6023      	str	r3, [r4, #0]
 8002782:	b016      	add	sp, #88	; 0x58
 8002784:	bd70      	pop	{r4, r5, r6, pc}
	...

08002788 <__smakebuf_r>:
 8002788:	898b      	ldrh	r3, [r1, #12]
 800278a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800278c:	079d      	lsls	r5, r3, #30
 800278e:	4606      	mov	r6, r0
 8002790:	460c      	mov	r4, r1
 8002792:	d507      	bpl.n	80027a4 <__smakebuf_r+0x1c>
 8002794:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002798:	6023      	str	r3, [r4, #0]
 800279a:	6123      	str	r3, [r4, #16]
 800279c:	2301      	movs	r3, #1
 800279e:	6163      	str	r3, [r4, #20]
 80027a0:	b002      	add	sp, #8
 80027a2:	bd70      	pop	{r4, r5, r6, pc}
 80027a4:	ab01      	add	r3, sp, #4
 80027a6:	466a      	mov	r2, sp
 80027a8:	f7ff ffc8 	bl	800273c <__swhatbuf_r>
 80027ac:	9900      	ldr	r1, [sp, #0]
 80027ae:	4605      	mov	r5, r0
 80027b0:	4630      	mov	r0, r6
 80027b2:	f7ff fa57 	bl	8001c64 <_malloc_r>
 80027b6:	b948      	cbnz	r0, 80027cc <__smakebuf_r+0x44>
 80027b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027bc:	059a      	lsls	r2, r3, #22
 80027be:	d4ef      	bmi.n	80027a0 <__smakebuf_r+0x18>
 80027c0:	f023 0303 	bic.w	r3, r3, #3
 80027c4:	f043 0302 	orr.w	r3, r3, #2
 80027c8:	81a3      	strh	r3, [r4, #12]
 80027ca:	e7e3      	b.n	8002794 <__smakebuf_r+0xc>
 80027cc:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <__smakebuf_r+0x7c>)
 80027ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80027d0:	89a3      	ldrh	r3, [r4, #12]
 80027d2:	6020      	str	r0, [r4, #0]
 80027d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d8:	81a3      	strh	r3, [r4, #12]
 80027da:	9b00      	ldr	r3, [sp, #0]
 80027dc:	6163      	str	r3, [r4, #20]
 80027de:	9b01      	ldr	r3, [sp, #4]
 80027e0:	6120      	str	r0, [r4, #16]
 80027e2:	b15b      	cbz	r3, 80027fc <__smakebuf_r+0x74>
 80027e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027e8:	4630      	mov	r0, r6
 80027ea:	f000 f889 	bl	8002900 <_isatty_r>
 80027ee:	b128      	cbz	r0, 80027fc <__smakebuf_r+0x74>
 80027f0:	89a3      	ldrh	r3, [r4, #12]
 80027f2:	f023 0303 	bic.w	r3, r3, #3
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	81a3      	strh	r3, [r4, #12]
 80027fc:	89a0      	ldrh	r0, [r4, #12]
 80027fe:	4305      	orrs	r5, r0
 8002800:	81a5      	strh	r5, [r4, #12]
 8002802:	e7cd      	b.n	80027a0 <__smakebuf_r+0x18>
 8002804:	08001a7d 	.word	0x08001a7d

08002808 <__malloc_lock>:
 8002808:	4801      	ldr	r0, [pc, #4]	; (8002810 <__malloc_lock+0x8>)
 800280a:	f7ff ba09 	b.w	8001c20 <__retarget_lock_acquire_recursive>
 800280e:	bf00      	nop
 8002810:	20000094 	.word	0x20000094

08002814 <__malloc_unlock>:
 8002814:	4801      	ldr	r0, [pc, #4]	; (800281c <__malloc_unlock+0x8>)
 8002816:	f7ff ba04 	b.w	8001c22 <__retarget_lock_release_recursive>
 800281a:	bf00      	nop
 800281c:	20000094 	.word	0x20000094

08002820 <_free_r>:
 8002820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002822:	2900      	cmp	r1, #0
 8002824:	d044      	beq.n	80028b0 <_free_r+0x90>
 8002826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800282a:	9001      	str	r0, [sp, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	f1a1 0404 	sub.w	r4, r1, #4
 8002832:	bfb8      	it	lt
 8002834:	18e4      	addlt	r4, r4, r3
 8002836:	f7ff ffe7 	bl	8002808 <__malloc_lock>
 800283a:	4a1e      	ldr	r2, [pc, #120]	; (80028b4 <_free_r+0x94>)
 800283c:	9801      	ldr	r0, [sp, #4]
 800283e:	6813      	ldr	r3, [r2, #0]
 8002840:	b933      	cbnz	r3, 8002850 <_free_r+0x30>
 8002842:	6063      	str	r3, [r4, #4]
 8002844:	6014      	str	r4, [r2, #0]
 8002846:	b003      	add	sp, #12
 8002848:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800284c:	f7ff bfe2 	b.w	8002814 <__malloc_unlock>
 8002850:	42a3      	cmp	r3, r4
 8002852:	d908      	bls.n	8002866 <_free_r+0x46>
 8002854:	6825      	ldr	r5, [r4, #0]
 8002856:	1961      	adds	r1, r4, r5
 8002858:	428b      	cmp	r3, r1
 800285a:	bf01      	itttt	eq
 800285c:	6819      	ldreq	r1, [r3, #0]
 800285e:	685b      	ldreq	r3, [r3, #4]
 8002860:	1949      	addeq	r1, r1, r5
 8002862:	6021      	streq	r1, [r4, #0]
 8002864:	e7ed      	b.n	8002842 <_free_r+0x22>
 8002866:	461a      	mov	r2, r3
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	b10b      	cbz	r3, 8002870 <_free_r+0x50>
 800286c:	42a3      	cmp	r3, r4
 800286e:	d9fa      	bls.n	8002866 <_free_r+0x46>
 8002870:	6811      	ldr	r1, [r2, #0]
 8002872:	1855      	adds	r5, r2, r1
 8002874:	42a5      	cmp	r5, r4
 8002876:	d10b      	bne.n	8002890 <_free_r+0x70>
 8002878:	6824      	ldr	r4, [r4, #0]
 800287a:	4421      	add	r1, r4
 800287c:	1854      	adds	r4, r2, r1
 800287e:	42a3      	cmp	r3, r4
 8002880:	6011      	str	r1, [r2, #0]
 8002882:	d1e0      	bne.n	8002846 <_free_r+0x26>
 8002884:	681c      	ldr	r4, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	6053      	str	r3, [r2, #4]
 800288a:	4421      	add	r1, r4
 800288c:	6011      	str	r1, [r2, #0]
 800288e:	e7da      	b.n	8002846 <_free_r+0x26>
 8002890:	d902      	bls.n	8002898 <_free_r+0x78>
 8002892:	230c      	movs	r3, #12
 8002894:	6003      	str	r3, [r0, #0]
 8002896:	e7d6      	b.n	8002846 <_free_r+0x26>
 8002898:	6825      	ldr	r5, [r4, #0]
 800289a:	1961      	adds	r1, r4, r5
 800289c:	428b      	cmp	r3, r1
 800289e:	bf04      	itt	eq
 80028a0:	6819      	ldreq	r1, [r3, #0]
 80028a2:	685b      	ldreq	r3, [r3, #4]
 80028a4:	6063      	str	r3, [r4, #4]
 80028a6:	bf04      	itt	eq
 80028a8:	1949      	addeq	r1, r1, r5
 80028aa:	6021      	streq	r1, [r4, #0]
 80028ac:	6054      	str	r4, [r2, #4]
 80028ae:	e7ca      	b.n	8002846 <_free_r+0x26>
 80028b0:	b003      	add	sp, #12
 80028b2:	bd30      	pop	{r4, r5, pc}
 80028b4:	20000098 	.word	0x20000098

080028b8 <_read_r>:
 80028b8:	b538      	push	{r3, r4, r5, lr}
 80028ba:	4d07      	ldr	r5, [pc, #28]	; (80028d8 <_read_r+0x20>)
 80028bc:	4604      	mov	r4, r0
 80028be:	4608      	mov	r0, r1
 80028c0:	4611      	mov	r1, r2
 80028c2:	2200      	movs	r2, #0
 80028c4:	602a      	str	r2, [r5, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	f7fd ffe8 	bl	800089c <_read>
 80028cc:	1c43      	adds	r3, r0, #1
 80028ce:	d102      	bne.n	80028d6 <_read_r+0x1e>
 80028d0:	682b      	ldr	r3, [r5, #0]
 80028d2:	b103      	cbz	r3, 80028d6 <_read_r+0x1e>
 80028d4:	6023      	str	r3, [r4, #0]
 80028d6:	bd38      	pop	{r3, r4, r5, pc}
 80028d8:	200000a0 	.word	0x200000a0

080028dc <_fstat_r>:
 80028dc:	b538      	push	{r3, r4, r5, lr}
 80028de:	4d07      	ldr	r5, [pc, #28]	; (80028fc <_fstat_r+0x20>)
 80028e0:	2300      	movs	r3, #0
 80028e2:	4604      	mov	r4, r0
 80028e4:	4608      	mov	r0, r1
 80028e6:	4611      	mov	r1, r2
 80028e8:	602b      	str	r3, [r5, #0]
 80028ea:	f7fe f800 	bl	80008ee <_fstat>
 80028ee:	1c43      	adds	r3, r0, #1
 80028f0:	d102      	bne.n	80028f8 <_fstat_r+0x1c>
 80028f2:	682b      	ldr	r3, [r5, #0]
 80028f4:	b103      	cbz	r3, 80028f8 <_fstat_r+0x1c>
 80028f6:	6023      	str	r3, [r4, #0]
 80028f8:	bd38      	pop	{r3, r4, r5, pc}
 80028fa:	bf00      	nop
 80028fc:	200000a0 	.word	0x200000a0

08002900 <_isatty_r>:
 8002900:	b538      	push	{r3, r4, r5, lr}
 8002902:	4d06      	ldr	r5, [pc, #24]	; (800291c <_isatty_r+0x1c>)
 8002904:	2300      	movs	r3, #0
 8002906:	4604      	mov	r4, r0
 8002908:	4608      	mov	r0, r1
 800290a:	602b      	str	r3, [r5, #0]
 800290c:	f7fd ffff 	bl	800090e <_isatty>
 8002910:	1c43      	adds	r3, r0, #1
 8002912:	d102      	bne.n	800291a <_isatty_r+0x1a>
 8002914:	682b      	ldr	r3, [r5, #0]
 8002916:	b103      	cbz	r3, 800291a <_isatty_r+0x1a>
 8002918:	6023      	str	r3, [r4, #0]
 800291a:	bd38      	pop	{r3, r4, r5, pc}
 800291c:	200000a0 	.word	0x200000a0

08002920 <_init>:
 8002920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002922:	bf00      	nop
 8002924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002926:	bc08      	pop	{r3}
 8002928:	469e      	mov	lr, r3
 800292a:	4770      	bx	lr

0800292c <_fini>:
 800292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292e:	bf00      	nop
 8002930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002932:	bc08      	pop	{r3}
 8002934:	469e      	mov	lr, r3
 8002936:	4770      	bx	lr
